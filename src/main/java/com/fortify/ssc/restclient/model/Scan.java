/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * provides high-level information on the result of a single Fortify analysis, usually embedded inside an Artifact object
 */
@ApiModel(description = "provides high-level information on the result of a single Fortify analysis, usually embedded inside an Artifact object")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class Scan {
  @SerializedName("artifactId")
  private Long artifactId = null;

  @SerializedName("buildLabel")
  private String buildLabel = null;

  @SerializedName("certification")
  private String certification = null;

  @SerializedName("elapsedTime")
  private String elapsedTime = null;

  @SerializedName("engineVersion")
  private String engineVersion = null;

  @SerializedName("execLOC")
  private Integer execLOC = null;

  @SerializedName("fortifyAnnotationsLOC")
  private Integer fortifyAnnotationsLOC = null;

  @SerializedName("guid")
  private String guid = null;

  @SerializedName("hostname")
  private String hostname = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("noOfFiles")
  private Integer noOfFiles = null;

  @SerializedName("totalLOC")
  private Integer totalLOC = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("uploadDate")
  private OffsetDateTime uploadDate = null;

   /**
   * identifier of parent artifact object which contains this scan object
   * @return artifactId
  **/
  @ApiModelProperty(required = true, value = "identifier of parent artifact object which contains this scan object")
  public Long getArtifactId() {
    return artifactId;
  }

   /**
   * optional string identifier provided by the user when scanning
   * @return buildLabel
  **/
  @ApiModelProperty(required = true, value = "optional string identifier provided by the user when scanning")
  public String getBuildLabel() {
    return buildLabel;
  }

   /**
   * indicates whether the checksum on the analysis result is valid
   * @return certification
  **/
  @ApiModelProperty(required = true, value = "indicates whether the checksum on the analysis result is valid")
  public String getCertification() {
    return certification;
  }

   /**
   * analysis duration
   * @return elapsedTime
  **/
  @ApiModelProperty(required = true, value = "analysis duration")
  public String getElapsedTime() {
    return elapsedTime;
  }

   /**
   * version of analysis engine
   * @return engineVersion
  **/
  @ApiModelProperty(required = true, value = "version of analysis engine")
  public String getEngineVersion() {
    return engineVersion;
  }

   /**
   * total executable lines of code included in sources (excluding comments etc.)
   * @return execLOC
  **/
  @ApiModelProperty(required = true, value = "total executable lines of code included in sources (excluding comments etc.)")
  public Integer getExecLOC() {
    return execLOC;
  }

   /**
   * lines of code with annotations
   * @return fortifyAnnotationsLOC
  **/
  @ApiModelProperty(required = true, value = "lines of code with annotations")
  public Integer getFortifyAnnotationsLOC() {
    return fortifyAnnotationsLOC;
  }

   /**
   * globally unique id of scan object
   * @return guid
  **/
  @ApiModelProperty(required = true, value = "globally unique id of scan object")
  public String getGuid() {
    return guid;
  }

   /**
   * Get hostname
   * @return hostname
  **/
  @ApiModelProperty(required = true, value = "")
  public String getHostname() {
    return hostname;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

   /**
   * number of source files included in scan
   * @return noOfFiles
  **/
  @ApiModelProperty(required = true, value = "number of source files included in scan")
  public Integer getNoOfFiles() {
    return noOfFiles;
  }

   /**
   * total lines of code included in sources (includes comments etc.)
   * @return totalLOC
  **/
  @ApiModelProperty(required = true, value = "total lines of code included in sources (includes comments etc.)")
  public Integer getTotalLOC() {
    return totalLOC;
  }

   /**
   * indicates the type of analyzer that produced it, such as SCA or WEBINSPECT
   * @return type
  **/
  @ApiModelProperty(required = true, value = "indicates the type of analyzer that produced it, such as SCA or WEBINSPECT")
  public String getType() {
    return type;
  }

   /**
   * Get uploadDate
   * @return uploadDate
  **/
  @ApiModelProperty(required = true, value = "")
  public OffsetDateTime getUploadDate() {
    return uploadDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Scan scan = (Scan) o;
    return Objects.equals(this.artifactId, scan.artifactId) &&
        Objects.equals(this.buildLabel, scan.buildLabel) &&
        Objects.equals(this.certification, scan.certification) &&
        Objects.equals(this.elapsedTime, scan.elapsedTime) &&
        Objects.equals(this.engineVersion, scan.engineVersion) &&
        Objects.equals(this.execLOC, scan.execLOC) &&
        Objects.equals(this.fortifyAnnotationsLOC, scan.fortifyAnnotationsLOC) &&
        Objects.equals(this.guid, scan.guid) &&
        Objects.equals(this.hostname, scan.hostname) &&
        Objects.equals(this.id, scan.id) &&
        Objects.equals(this.noOfFiles, scan.noOfFiles) &&
        Objects.equals(this.totalLOC, scan.totalLOC) &&
        Objects.equals(this.type, scan.type) &&
        Objects.equals(this.uploadDate, scan.uploadDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactId, buildLabel, certification, elapsedTime, engineVersion, execLOC, fortifyAnnotationsLOC, guid, hostname, id, noOfFiles, totalLOC, type, uploadDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Scan {\n");
    
    sb.append("    artifactId: ").append(toIndentedString(artifactId)).append("\n");
    sb.append("    buildLabel: ").append(toIndentedString(buildLabel)).append("\n");
    sb.append("    certification: ").append(toIndentedString(certification)).append("\n");
    sb.append("    elapsedTime: ").append(toIndentedString(elapsedTime)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    execLOC: ").append(toIndentedString(execLOC)).append("\n");
    sb.append("    fortifyAnnotationsLOC: ").append(toIndentedString(fortifyAnnotationsLOC)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    noOfFiles: ").append(toIndentedString(noOfFiles)).append("\n");
    sb.append("    totalLOC: ").append(toIndentedString(totalLOC)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uploadDate: ").append(toIndentedString(uploadDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

