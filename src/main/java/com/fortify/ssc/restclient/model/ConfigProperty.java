/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.fortify.ssc.restclient.model.ConfigPropertyValueItem;
import com.fortify.ssc.restclient.model.ConfigPropertyValueValidation;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SSC application configuration property
 */
@ApiModel(description = "SSC application configuration property")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class ConfigProperty {
  @SerializedName("appliedAfterRestarting")
  private Boolean appliedAfterRestarting = null;

  @SerializedName("configPropertyValueValidation")
  private ConfigPropertyValueValidation configPropertyValueValidation = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("group")
  private String group = null;

  @SerializedName("groupSwitchEnabled")
  private Boolean groupSwitchEnabled = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Property value type.
   */
  @JsonAdapter(PropertyTypeEnum.Adapter.class)
  public enum PropertyTypeEnum {
    BOOLEAN("BOOLEAN"),
    
    INTEGER("INTEGER"),
    
    STRING("STRING"),
    
    STRINGMULTILINE("STRINGMULTILINE"),
    
    OPTIONLIST("OPTIONLIST"),
    
    DYNAMIC_OPTIONLIST("DYNAMIC_OPTIONLIST"),
    
    ENCODED("ENCODED"),
    
    ENCODEDHIDDEN("ENCODEDHIDDEN"),
    
    EMAIL("EMAIL"),
    
    URL("URL"),
    
    HOSTNAME("HOSTNAME"),
    
    MULTI_EMAIL("MULTI_EMAIL"),
    
    DISTINGUISHED_NAME("DISTINGUISHED_NAME"),
    
    ENCODED_DISTINGUISHED_NAME("ENCODED_DISTINGUISHED_NAME"),
    
    DISTINGUISHED_NAMES_("DISTINGUISHED_NAMES;");

    private String value;

    PropertyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PropertyTypeEnum fromValue(String text) {
      for (PropertyTypeEnum b : PropertyTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PropertyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PropertyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PropertyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PropertyTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("propertyType")
  private PropertyTypeEnum propertyType = null;

  @SerializedName("protectedOption")
  private Boolean protectedOption = null;

  @SerializedName("required")
  private Boolean required = null;

  @SerializedName("subGroup")
  private String subGroup = null;

  /**
   * Configuration property value.
   */
  @JsonAdapter(ValueEnum.Adapter.class)
  public enum ValueEnum {
    DEPENDS_ON_PROPERTY_TYPE_IT_CAN_BE_NUMBER("Depends on property type. It can be number"),
    
    STRING("string"),
    
    URL("URL"),
    
    EMAIL_OR_VALUE_FROM_VALUES_LIST_("email or value from values list.");

    private String value;

    ValueEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValueEnum fromValue(String text) {
      for (ValueEnum b : ValueEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ValueEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValueEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValueEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ValueEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("value")
  private ValueEnum value = null;

  @SerializedName("valuesList")
  private List<ConfigPropertyValueItem> valuesList = null;

  @SerializedName("version")
  private Integer version = null;

   /**
   * Should the SSC server be restarted after changing value of the property to apply the changes.
   * @return appliedAfterRestarting
  **/
  @ApiModelProperty(example = "false", value = "Should the SSC server be restarted after changing value of the property to apply the changes.")
  public Boolean isAppliedAfterRestarting() {
    return appliedAfterRestarting;
  }

  public ConfigProperty configPropertyValueValidation(ConfigPropertyValueValidation configPropertyValueValidation) {
    this.configPropertyValueValidation = configPropertyValueValidation;
    return this;
  }

   /**
   * Meta information about how the property&#39;s value should be validated on the client side.
   * @return configPropertyValueValidation
  **/
  @ApiModelProperty(value = "Meta information about how the property's value should be validated on the client side.")
  public ConfigPropertyValueValidation getConfigPropertyValueValidation() {
    return configPropertyValueValidation;
  }

  public void setConfigPropertyValueValidation(ConfigPropertyValueValidation configPropertyValueValidation) {
    this.configPropertyValueValidation = configPropertyValueValidation;
  }

   /**
   * Property description.
   * @return description
  **/
  @ApiModelProperty(value = "Property description.")
  public String getDescription() {
    return description;
  }

   /**
   * Parent group name the property belongs to.
   * @return group
  **/
  @ApiModelProperty(value = "Parent group name the property belongs to.")
  public String getGroup() {
    return group;
  }

   /**
   * Flag is set to TRUE if property is allowed to be edited on UI.
   * @return groupSwitchEnabled
  **/
  @ApiModelProperty(example = "false", value = "Flag is set to TRUE if property is allowed to be edited on UI.")
  public Boolean isGroupSwitchEnabled() {
    return groupSwitchEnabled;
  }

   /**
   * Configuration property unique name.
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Configuration property unique name.")
  public String getName() {
    return name;
  }

   /**
   * Property value type.
   * @return propertyType
  **/
  @ApiModelProperty(value = "Property value type.")
  public PropertyTypeEnum getPropertyType() {
    return propertyType;
  }

   /**
   * If special permission is required to get value of this property.
   * @return protectedOption
  **/
  @ApiModelProperty(example = "false", value = "If special permission is required to get value of this property.")
  public Boolean isProtectedOption() {
    return protectedOption;
  }

   /**
   * Flag is set to TRUE if this property is required and always must have non empty value.
   * @return required
  **/
  @ApiModelProperty(example = "false", value = "Flag is set to TRUE if this property is required and always must have non empty value.")
  public Boolean isRequired() {
    return required;
  }

   /**
   * Parent subgroup name the property belongs to.
   * @return subGroup
  **/
  @ApiModelProperty(value = "Parent subgroup name the property belongs to.")
  public String getSubGroup() {
    return subGroup;
  }

  public ConfigProperty value(ValueEnum value) {
    this.value = value;
    return this;
  }

   /**
   * Configuration property value.
   * @return value
  **/
  @ApiModelProperty(required = true, value = "Configuration property value.")
  public ValueEnum getValue() {
    return value;
  }

  public void setValue(ValueEnum value) {
    this.value = value;
  }

  public ConfigProperty valuesList(List<ConfigPropertyValueItem> valuesList) {
    this.valuesList = valuesList;
    return this;
  }

  public ConfigProperty addValuesListItem(ConfigPropertyValueItem valuesListItem) {
    if (this.valuesList == null) {
      this.valuesList = new ArrayList<ConfigPropertyValueItem>();
    }
    this.valuesList.add(valuesListItem);
    return this;
  }

   /**
   * List of allowed property values if property type is OPTIONLIST or DYNAMIC_OPTIONLIST.
   * @return valuesList
  **/
  @ApiModelProperty(value = "List of allowed property values if property type is OPTIONLIST or DYNAMIC_OPTIONLIST.")
  public List<ConfigPropertyValueItem> getValuesList() {
    return valuesList;
  }

  public void setValuesList(List<ConfigPropertyValueItem> valuesList) {
    this.valuesList = valuesList;
  }

   /**
   * Configuration property version stored on the server. This value is used for optimistic locking of the property object to prevent concurrent changes of the property value by different users at the same time.
   * @return version
  **/
  @ApiModelProperty(required = true, value = "Configuration property version stored on the server. This value is used for optimistic locking of the property object to prevent concurrent changes of the property value by different users at the same time.")
  public Integer getVersion() {
    return version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigProperty configProperty = (ConfigProperty) o;
    return Objects.equals(this.appliedAfterRestarting, configProperty.appliedAfterRestarting) &&
        Objects.equals(this.configPropertyValueValidation, configProperty.configPropertyValueValidation) &&
        Objects.equals(this.description, configProperty.description) &&
        Objects.equals(this.group, configProperty.group) &&
        Objects.equals(this.groupSwitchEnabled, configProperty.groupSwitchEnabled) &&
        Objects.equals(this.name, configProperty.name) &&
        Objects.equals(this.propertyType, configProperty.propertyType) &&
        Objects.equals(this.protectedOption, configProperty.protectedOption) &&
        Objects.equals(this.required, configProperty.required) &&
        Objects.equals(this.subGroup, configProperty.subGroup) &&
        Objects.equals(this.value, configProperty.value) &&
        Objects.equals(this.valuesList, configProperty.valuesList) &&
        Objects.equals(this.version, configProperty.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliedAfterRestarting, configPropertyValueValidation, description, group, groupSwitchEnabled, name, propertyType, protectedOption, required, subGroup, value, valuesList, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigProperty {\n");
    
    sb.append("    appliedAfterRestarting: ").append(toIndentedString(appliedAfterRestarting)).append("\n");
    sb.append("    configPropertyValueValidation: ").append(toIndentedString(configPropertyValueValidation)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    groupSwitchEnabled: ").append(toIndentedString(groupSwitchEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    propertyType: ").append(toIndentedString(propertyType)).append("\n");
    sb.append("    protectedOption: ").append(toIndentedString(protectedOption)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    subGroup: ").append(toIndentedString(subGroup)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    valuesList: ").append(toIndentedString(valuesList)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

