/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.fortify.ssc.restclient.model.DynamicScanRequestParameter;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Dynamic Scan Request object
 */
@ApiModel(description = "Dynamic Scan Request object")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class DynamicScanRequest {
  @SerializedName("id")
  private Long id = null;

  @SerializedName("lastUpdateDate")
  private OffsetDateTime lastUpdateDate = null;

  @SerializedName("objectVersion")
  private Integer objectVersion = null;

  @SerializedName("parameters")
  private List<DynamicScanRequestParameter> parameters = new ArrayList<DynamicScanRequestParameter>();

  @SerializedName("requestedDate")
  private OffsetDateTime requestedDate = null;

  /**
   * The status of the dynamic scan request
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUBMITTED("SUBMITTED"),
    
    PICKED_UP("PICKED_UP"),
    
    CANCELED("CANCELED"),
    
    COMPLETED("COMPLETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("submitter")
  private String submitter = null;

  public DynamicScanRequest id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of dynamic scan request
   * @return id
  **/
  @ApiModelProperty(required = true, value = "Unique identifier of dynamic scan request")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public DynamicScanRequest lastUpdateDate(OffsetDateTime lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
    return this;
  }

   /**
   * The date that the dynamic scan request was updated
   * @return lastUpdateDate
  **/
  @ApiModelProperty(value = "The date that the dynamic scan request was updated")
  public OffsetDateTime getLastUpdateDate() {
    return lastUpdateDate;
  }

  public void setLastUpdateDate(OffsetDateTime lastUpdateDate) {
    this.lastUpdateDate = lastUpdateDate;
  }

  public DynamicScanRequest objectVersion(Integer objectVersion) {
    this.objectVersion = objectVersion;
    return this;
  }

   /**
   * The object version of the dynamic scan request
   * @return objectVersion
  **/
  @ApiModelProperty(value = "The object version of the dynamic scan request")
  public Integer getObjectVersion() {
    return objectVersion;
  }

  public void setObjectVersion(Integer objectVersion) {
    this.objectVersion = objectVersion;
  }

  public DynamicScanRequest parameters(List<DynamicScanRequestParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public DynamicScanRequest addParametersItem(DynamicScanRequestParameter parametersItem) {
    this.parameters.add(parametersItem);
    return this;
  }

   /**
   * Parameters that are needed for dynamic scan request
   * @return parameters
  **/
  @ApiModelProperty(required = true, value = "Parameters that are needed for dynamic scan request")
  public List<DynamicScanRequestParameter> getParameters() {
    return parameters;
  }

  public void setParameters(List<DynamicScanRequestParameter> parameters) {
    this.parameters = parameters;
  }

  public DynamicScanRequest requestedDate(OffsetDateTime requestedDate) {
    this.requestedDate = requestedDate;
    return this;
  }

   /**
   * The date that the dynamic scan request was submitted
   * @return requestedDate
  **/
  @ApiModelProperty(value = "The date that the dynamic scan request was submitted")
  public OffsetDateTime getRequestedDate() {
    return requestedDate;
  }

  public void setRequestedDate(OffsetDateTime requestedDate) {
    this.requestedDate = requestedDate;
  }

  public DynamicScanRequest status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The status of the dynamic scan request
   * @return status
  **/
  @ApiModelProperty(value = "The status of the dynamic scan request")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public DynamicScanRequest submitter(String submitter) {
    this.submitter = submitter;
    return this;
  }

   /**
   * The id of the user who submitted the dynamic scan request
   * @return submitter
  **/
  @ApiModelProperty(value = "The id of the user who submitted the dynamic scan request")
  public String getSubmitter() {
    return submitter;
  }

  public void setSubmitter(String submitter) {
    this.submitter = submitter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicScanRequest dynamicScanRequest = (DynamicScanRequest) o;
    return Objects.equals(this.id, dynamicScanRequest.id) &&
        Objects.equals(this.lastUpdateDate, dynamicScanRequest.lastUpdateDate) &&
        Objects.equals(this.objectVersion, dynamicScanRequest.objectVersion) &&
        Objects.equals(this.parameters, dynamicScanRequest.parameters) &&
        Objects.equals(this.requestedDate, dynamicScanRequest.requestedDate) &&
        Objects.equals(this.status, dynamicScanRequest.status) &&
        Objects.equals(this.submitter, dynamicScanRequest.submitter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, lastUpdateDate, objectVersion, parameters, requestedDate, status, submitter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicScanRequest {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastUpdateDate: ").append(toIndentedString(lastUpdateDate)).append("\n");
    sb.append("    objectVersion: ").append(toIndentedString(objectVersion)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    requestedDate: ").append(toIndentedString(requestedDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submitter: ").append(toIndentedString(submitter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

