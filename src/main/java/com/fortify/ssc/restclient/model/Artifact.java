/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.fortify.ssc.restclient.model.EmbeddedScans;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * Project version artifact that contains scan results.
 */
@ApiModel(description = "Project version artifact that contains scan results.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class Artifact {
  @SerializedName("_embed")
  private EmbeddedScans embed = null;

  @SerializedName("allowApprove")
  private Boolean allowApprove = null;

  @SerializedName("allowDelete")
  private Boolean allowDelete = null;

  @SerializedName("allowPurge")
  private Boolean allowPurge = null;

  @SerializedName("approvalComment")
  private String approvalComment = null;

  @SerializedName("approvalDate")
  private OffsetDateTime approvalDate = null;

  @SerializedName("approvalUsername")
  private String approvalUsername = null;

  /**
   * Gets or Sets artifactType
   */
  @JsonAdapter(ArtifactTypeEnum.Adapter.class)
  public enum ArtifactTypeEnum {
    EMPTY(""),
    
    FPR("Fpr"),
    
    FPRPREPROCESS("FprPreProcess"),
    
    ANALYSISARTIFACT("AnalysisArtifact"),
    
    SOURCEARCHIVE("SourceArchive"),
    
    RUNTIMEEVENTLOG("RuntimeEventLog");

    private String value;

    ArtifactTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ArtifactTypeEnum fromValue(String text) {
      for (ArtifactTypeEnum b : ArtifactTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ArtifactTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ArtifactTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ArtifactTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ArtifactTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("artifactType")
  private ArtifactTypeEnum artifactType = null;

  @SerializedName("auditUpdated")
  private Boolean auditUpdated = null;

  @SerializedName("fileName")
  private String fileName = null;

  @SerializedName("fileSize")
  private Long fileSize = null;

  @SerializedName("fileURL")
  private String fileURL = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("inModifyingStatus")
  private Boolean inModifyingStatus = null;

  @SerializedName("indexed")
  private Boolean indexed = null;

  @SerializedName("lastScanDate")
  private OffsetDateTime lastScanDate = null;

  @SerializedName("messageCount")
  private Long messageCount = null;

  @SerializedName("messages")
  private String messages = null;

  @SerializedName("originalFileName")
  private String originalFileName = null;

  /**
   * Gets or Sets otherStatus
   */
  @JsonAdapter(OtherStatusEnum.Adapter.class)
  public enum OtherStatusEnum {
    EMPTY(""),
    
    NOTEXIST("NotExist"),
    
    IGNORED("Ignored"),
    
    PROCESSED("Processed");

    private String value;

    OtherStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OtherStatusEnum fromValue(String text) {
      for (OtherStatusEnum b : OtherStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OtherStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OtherStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OtherStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OtherStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("otherStatus")
  private OtherStatusEnum otherStatus = null;

  @SerializedName("purged")
  private Boolean purged = null;

  /**
   * Gets or Sets runtimeStatus
   */
  @JsonAdapter(RuntimeStatusEnum.Adapter.class)
  public enum RuntimeStatusEnum {
    EMPTY(""),
    
    NOTEXIST("NotExist"),
    
    IGNORED("Ignored"),
    
    PROCESSED("Processed");

    private String value;

    RuntimeStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RuntimeStatusEnum fromValue(String text) {
      for (RuntimeStatusEnum b : RuntimeStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RuntimeStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuntimeStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuntimeStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RuntimeStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("runtimeStatus")
  private RuntimeStatusEnum runtimeStatus = null;

  /**
   * Gets or Sets scaStatus
   */
  @JsonAdapter(ScaStatusEnum.Adapter.class)
  public enum ScaStatusEnum {
    EMPTY(""),
    
    NOTEXIST("NotExist"),
    
    IGNORED("Ignored"),
    
    PROCESSED("Processed");

    private String value;

    ScaStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScaStatusEnum fromValue(String text) {
      for (ScaStatusEnum b : ScaStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ScaStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScaStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScaStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ScaStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("scaStatus")
  private ScaStatusEnum scaStatus = null;

  @SerializedName("scanErrorsCount")
  private Long scanErrorsCount = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NONE("NONE"),
    
    SCHED_PROCESSING("SCHED_PROCESSING"),
    
    PROCESSING("PROCESSING"),
    
    PROCESS_COMPLETE("PROCESS_COMPLETE"),
    
    ERROR_PROCESSING("ERROR_PROCESSING"),
    
    REQUIRE_AUTH("REQUIRE_AUTH"),
    
    DELETING("DELETING"),
    
    ERROR_DELETING("ERROR_DELETING"),
    
    DELETED("DELETED"),
    
    PURGING("PURGING"),
    
    PURGED("PURGED"),
    
    ERROR_PURGING("ERROR_PURGING"),
    
    DISPATCH_ANALYSIS("DISPATCH_ANALYSIS"),
    
    DISPATCH_REAUDIT("DISPATCH_REAUDIT"),
    
    ERROR_DISPATCH("ERROR_DISPATCH"),
    
    QUEUED_ANALYSIS("QUEUED_ANALYSIS"),
    
    REQUEUED_ANALYSIS("REQUEUED_ANALYSIS"),
    
    ANALYZING("ANALYZING"),
    
    ANALYSIS_COMPLETE("ANALYSIS_COMPLETE"),
    
    ERROR_ANALYZING("ERROR_ANALYZING"),
    
    UNKNOWN("UNKNOWN"),
    
    AUDIT_FAILED("AUDIT_FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("uploadDate")
  private OffsetDateTime uploadDate = null;

  @SerializedName("uploadIP")
  private String uploadIP = null;

  @SerializedName("userName")
  private String userName = null;

  @SerializedName("versionNumber")
  private Integer versionNumber = null;

  /**
   * Gets or Sets webInspectStatus
   */
  @JsonAdapter(WebInspectStatusEnum.Adapter.class)
  public enum WebInspectStatusEnum {
    EMPTY(""),
    
    NOTEXIST("NotExist"),
    
    IGNORED("Ignored"),
    
    PROCESSED("Processed");

    private String value;

    WebInspectStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WebInspectStatusEnum fromValue(String text) {
      for (WebInspectStatusEnum b : WebInspectStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WebInspectStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WebInspectStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WebInspectStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return WebInspectStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("webInspectStatus")
  private WebInspectStatusEnum webInspectStatus = null;

  public Artifact embed(EmbeddedScans embed) {
    this.embed = embed;
    return this;
  }

   /**
   * Get embed
   * @return embed
  **/
  @ApiModelProperty(value = "")
  public EmbeddedScans getEmbed() {
    return embed;
  }

  public void setEmbed(EmbeddedScans embed) {
    this.embed = embed;
  }

  public Artifact allowApprove(Boolean allowApprove) {
    this.allowApprove = allowApprove;
    return this;
  }

   /**
   * Get allowApprove
   * @return allowApprove
  **/
  @ApiModelProperty(value = "")
  public Boolean isAllowApprove() {
    return allowApprove;
  }

  public void setAllowApprove(Boolean allowApprove) {
    this.allowApprove = allowApprove;
  }

  public Artifact allowDelete(Boolean allowDelete) {
    this.allowDelete = allowDelete;
    return this;
  }

   /**
   * Get allowDelete
   * @return allowDelete
  **/
  @ApiModelProperty(value = "")
  public Boolean isAllowDelete() {
    return allowDelete;
  }

  public void setAllowDelete(Boolean allowDelete) {
    this.allowDelete = allowDelete;
  }

  public Artifact allowPurge(Boolean allowPurge) {
    this.allowPurge = allowPurge;
    return this;
  }

   /**
   * Get allowPurge
   * @return allowPurge
  **/
  @ApiModelProperty(value = "")
  public Boolean isAllowPurge() {
    return allowPurge;
  }

  public void setAllowPurge(Boolean allowPurge) {
    this.allowPurge = allowPurge;
  }

  public Artifact approvalComment(String approvalComment) {
    this.approvalComment = approvalComment;
    return this;
  }

   /**
   * Get approvalComment
   * @return approvalComment
  **/
  @ApiModelProperty(value = "")
  public String getApprovalComment() {
    return approvalComment;
  }

  public void setApprovalComment(String approvalComment) {
    this.approvalComment = approvalComment;
  }

  public Artifact approvalDate(OffsetDateTime approvalDate) {
    this.approvalDate = approvalDate;
    return this;
  }

   /**
   * Get approvalDate
   * @return approvalDate
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getApprovalDate() {
    return approvalDate;
  }

  public void setApprovalDate(OffsetDateTime approvalDate) {
    this.approvalDate = approvalDate;
  }

  public Artifact approvalUsername(String approvalUsername) {
    this.approvalUsername = approvalUsername;
    return this;
  }

   /**
   * Get approvalUsername
   * @return approvalUsername
  **/
  @ApiModelProperty(value = "")
  public String getApprovalUsername() {
    return approvalUsername;
  }

  public void setApprovalUsername(String approvalUsername) {
    this.approvalUsername = approvalUsername;
  }

  public Artifact artifactType(ArtifactTypeEnum artifactType) {
    this.artifactType = artifactType;
    return this;
  }

   /**
   * Get artifactType
   * @return artifactType
  **/
  @ApiModelProperty(value = "")
  public ArtifactTypeEnum getArtifactType() {
    return artifactType;
  }

  public void setArtifactType(ArtifactTypeEnum artifactType) {
    this.artifactType = artifactType;
  }

  public Artifact auditUpdated(Boolean auditUpdated) {
    this.auditUpdated = auditUpdated;
    return this;
  }

   /**
   * Get auditUpdated
   * @return auditUpdated
  **/
  @ApiModelProperty(value = "")
  public Boolean isAuditUpdated() {
    return auditUpdated;
  }

  public void setAuditUpdated(Boolean auditUpdated) {
    this.auditUpdated = auditUpdated;
  }

  public Artifact fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * Get fileName
   * @return fileName
  **/
  @ApiModelProperty(value = "")
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public Artifact fileSize(Long fileSize) {
    this.fileSize = fileSize;
    return this;
  }

   /**
   * Get fileSize
   * @return fileSize
  **/
  @ApiModelProperty(value = "")
  public Long getFileSize() {
    return fileSize;
  }

  public void setFileSize(Long fileSize) {
    this.fileSize = fileSize;
  }

  public Artifact fileURL(String fileURL) {
    this.fileURL = fileURL;
    return this;
  }

   /**
   * Get fileURL
   * @return fileURL
  **/
  @ApiModelProperty(value = "")
  public String getFileURL() {
    return fileURL;
  }

  public void setFileURL(String fileURL) {
    this.fileURL = fileURL;
  }

   /**
   * Artifact id
   * @return id
  **/
  @ApiModelProperty(value = "Artifact id")
  public Long getId() {
    return id;
  }

  public Artifact inModifyingStatus(Boolean inModifyingStatus) {
    this.inModifyingStatus = inModifyingStatus;
    return this;
  }

   /**
   * Get inModifyingStatus
   * @return inModifyingStatus
  **/
  @ApiModelProperty(value = "")
  public Boolean isInModifyingStatus() {
    return inModifyingStatus;
  }

  public void setInModifyingStatus(Boolean inModifyingStatus) {
    this.inModifyingStatus = inModifyingStatus;
  }

  public Artifact indexed(Boolean indexed) {
    this.indexed = indexed;
    return this;
  }

   /**
   * Get indexed
   * @return indexed
  **/
  @ApiModelProperty(value = "")
  public Boolean isIndexed() {
    return indexed;
  }

  public void setIndexed(Boolean indexed) {
    this.indexed = indexed;
  }

  public Artifact lastScanDate(OffsetDateTime lastScanDate) {
    this.lastScanDate = lastScanDate;
    return this;
  }

   /**
   * Get lastScanDate
   * @return lastScanDate
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getLastScanDate() {
    return lastScanDate;
  }

  public void setLastScanDate(OffsetDateTime lastScanDate) {
    this.lastScanDate = lastScanDate;
  }

  public Artifact messageCount(Long messageCount) {
    this.messageCount = messageCount;
    return this;
  }

   /**
   * Get messageCount
   * @return messageCount
  **/
  @ApiModelProperty(value = "")
  public Long getMessageCount() {
    return messageCount;
  }

  public void setMessageCount(Long messageCount) {
    this.messageCount = messageCount;
  }

  public Artifact messages(String messages) {
    this.messages = messages;
    return this;
  }

   /**
   * Get messages
   * @return messages
  **/
  @ApiModelProperty(value = "")
  public String getMessages() {
    return messages;
  }

  public void setMessages(String messages) {
    this.messages = messages;
  }

  public Artifact originalFileName(String originalFileName) {
    this.originalFileName = originalFileName;
    return this;
  }

   /**
   * Get originalFileName
   * @return originalFileName
  **/
  @ApiModelProperty(value = "")
  public String getOriginalFileName() {
    return originalFileName;
  }

  public void setOriginalFileName(String originalFileName) {
    this.originalFileName = originalFileName;
  }

  public Artifact otherStatus(OtherStatusEnum otherStatus) {
    this.otherStatus = otherStatus;
    return this;
  }

   /**
   * Get otherStatus
   * @return otherStatus
  **/
  @ApiModelProperty(value = "")
  public OtherStatusEnum getOtherStatus() {
    return otherStatus;
  }

  public void setOtherStatus(OtherStatusEnum otherStatus) {
    this.otherStatus = otherStatus;
  }

  public Artifact purged(Boolean purged) {
    this.purged = purged;
    return this;
  }

   /**
   * Get purged
   * @return purged
  **/
  @ApiModelProperty(value = "")
  public Boolean isPurged() {
    return purged;
  }

  public void setPurged(Boolean purged) {
    this.purged = purged;
  }

  public Artifact runtimeStatus(RuntimeStatusEnum runtimeStatus) {
    this.runtimeStatus = runtimeStatus;
    return this;
  }

   /**
   * Get runtimeStatus
   * @return runtimeStatus
  **/
  @ApiModelProperty(value = "")
  public RuntimeStatusEnum getRuntimeStatus() {
    return runtimeStatus;
  }

  public void setRuntimeStatus(RuntimeStatusEnum runtimeStatus) {
    this.runtimeStatus = runtimeStatus;
  }

  public Artifact scaStatus(ScaStatusEnum scaStatus) {
    this.scaStatus = scaStatus;
    return this;
  }

   /**
   * Get scaStatus
   * @return scaStatus
  **/
  @ApiModelProperty(value = "")
  public ScaStatusEnum getScaStatus() {
    return scaStatus;
  }

  public void setScaStatus(ScaStatusEnum scaStatus) {
    this.scaStatus = scaStatus;
  }

  public Artifact scanErrorsCount(Long scanErrorsCount) {
    this.scanErrorsCount = scanErrorsCount;
    return this;
  }

   /**
   * Get scanErrorsCount
   * @return scanErrorsCount
  **/
  @ApiModelProperty(value = "")
  public Long getScanErrorsCount() {
    return scanErrorsCount;
  }

  public void setScanErrorsCount(Long scanErrorsCount) {
    this.scanErrorsCount = scanErrorsCount;
  }

  public Artifact status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public Artifact uploadDate(OffsetDateTime uploadDate) {
    this.uploadDate = uploadDate;
    return this;
  }

   /**
   * Get uploadDate
   * @return uploadDate
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getUploadDate() {
    return uploadDate;
  }

  public void setUploadDate(OffsetDateTime uploadDate) {
    this.uploadDate = uploadDate;
  }

  public Artifact uploadIP(String uploadIP) {
    this.uploadIP = uploadIP;
    return this;
  }

   /**
   * Get uploadIP
   * @return uploadIP
  **/
  @ApiModelProperty(value = "")
  public String getUploadIP() {
    return uploadIP;
  }

  public void setUploadIP(String uploadIP) {
    this.uploadIP = uploadIP;
  }

  public Artifact userName(String userName) {
    this.userName = userName;
    return this;
  }

   /**
   * Get userName
   * @return userName
  **/
  @ApiModelProperty(value = "")
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }

  public Artifact versionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
    return this;
  }

   /**
   * Get versionNumber
   * @return versionNumber
  **/
  @ApiModelProperty(value = "")
  public Integer getVersionNumber() {
    return versionNumber;
  }

  public void setVersionNumber(Integer versionNumber) {
    this.versionNumber = versionNumber;
  }

  public Artifact webInspectStatus(WebInspectStatusEnum webInspectStatus) {
    this.webInspectStatus = webInspectStatus;
    return this;
  }

   /**
   * Get webInspectStatus
   * @return webInspectStatus
  **/
  @ApiModelProperty(value = "")
  public WebInspectStatusEnum getWebInspectStatus() {
    return webInspectStatus;
  }

  public void setWebInspectStatus(WebInspectStatusEnum webInspectStatus) {
    this.webInspectStatus = webInspectStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Artifact artifact = (Artifact) o;
    return Objects.equals(this.embed, artifact.embed) &&
        Objects.equals(this.allowApprove, artifact.allowApprove) &&
        Objects.equals(this.allowDelete, artifact.allowDelete) &&
        Objects.equals(this.allowPurge, artifact.allowPurge) &&
        Objects.equals(this.approvalComment, artifact.approvalComment) &&
        Objects.equals(this.approvalDate, artifact.approvalDate) &&
        Objects.equals(this.approvalUsername, artifact.approvalUsername) &&
        Objects.equals(this.artifactType, artifact.artifactType) &&
        Objects.equals(this.auditUpdated, artifact.auditUpdated) &&
        Objects.equals(this.fileName, artifact.fileName) &&
        Objects.equals(this.fileSize, artifact.fileSize) &&
        Objects.equals(this.fileURL, artifact.fileURL) &&
        Objects.equals(this.id, artifact.id) &&
        Objects.equals(this.inModifyingStatus, artifact.inModifyingStatus) &&
        Objects.equals(this.indexed, artifact.indexed) &&
        Objects.equals(this.lastScanDate, artifact.lastScanDate) &&
        Objects.equals(this.messageCount, artifact.messageCount) &&
        Objects.equals(this.messages, artifact.messages) &&
        Objects.equals(this.originalFileName, artifact.originalFileName) &&
        Objects.equals(this.otherStatus, artifact.otherStatus) &&
        Objects.equals(this.purged, artifact.purged) &&
        Objects.equals(this.runtimeStatus, artifact.runtimeStatus) &&
        Objects.equals(this.scaStatus, artifact.scaStatus) &&
        Objects.equals(this.scanErrorsCount, artifact.scanErrorsCount) &&
        Objects.equals(this.status, artifact.status) &&
        Objects.equals(this.uploadDate, artifact.uploadDate) &&
        Objects.equals(this.uploadIP, artifact.uploadIP) &&
        Objects.equals(this.userName, artifact.userName) &&
        Objects.equals(this.versionNumber, artifact.versionNumber) &&
        Objects.equals(this.webInspectStatus, artifact.webInspectStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(embed, allowApprove, allowDelete, allowPurge, approvalComment, approvalDate, approvalUsername, artifactType, auditUpdated, fileName, fileSize, fileURL, id, inModifyingStatus, indexed, lastScanDate, messageCount, messages, originalFileName, otherStatus, purged, runtimeStatus, scaStatus, scanErrorsCount, status, uploadDate, uploadIP, userName, versionNumber, webInspectStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Artifact {\n");
    
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    allowApprove: ").append(toIndentedString(allowApprove)).append("\n");
    sb.append("    allowDelete: ").append(toIndentedString(allowDelete)).append("\n");
    sb.append("    allowPurge: ").append(toIndentedString(allowPurge)).append("\n");
    sb.append("    approvalComment: ").append(toIndentedString(approvalComment)).append("\n");
    sb.append("    approvalDate: ").append(toIndentedString(approvalDate)).append("\n");
    sb.append("    approvalUsername: ").append(toIndentedString(approvalUsername)).append("\n");
    sb.append("    artifactType: ").append(toIndentedString(artifactType)).append("\n");
    sb.append("    auditUpdated: ").append(toIndentedString(auditUpdated)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    fileURL: ").append(toIndentedString(fileURL)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inModifyingStatus: ").append(toIndentedString(inModifyingStatus)).append("\n");
    sb.append("    indexed: ").append(toIndentedString(indexed)).append("\n");
    sb.append("    lastScanDate: ").append(toIndentedString(lastScanDate)).append("\n");
    sb.append("    messageCount: ").append(toIndentedString(messageCount)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    originalFileName: ").append(toIndentedString(originalFileName)).append("\n");
    sb.append("    otherStatus: ").append(toIndentedString(otherStatus)).append("\n");
    sb.append("    purged: ").append(toIndentedString(purged)).append("\n");
    sb.append("    runtimeStatus: ").append(toIndentedString(runtimeStatus)).append("\n");
    sb.append("    scaStatus: ").append(toIndentedString(scaStatus)).append("\n");
    sb.append("    scanErrorsCount: ").append(toIndentedString(scanErrorsCount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    uploadDate: ").append(toIndentedString(uploadDate)).append("\n");
    sb.append("    uploadIP: ").append(toIndentedString(uploadIP)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    versionNumber: ").append(toIndentedString(versionNumber)).append("\n");
    sb.append("    webInspectStatus: ").append(toIndentedString(webInspectStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

