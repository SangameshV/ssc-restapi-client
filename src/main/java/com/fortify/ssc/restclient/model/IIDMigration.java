/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.fortify.ssc.restclient.model.IidMapping;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * IIDMigration
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class IIDMigration {
  @SerializedName("artifactId")
  private Long artifactId = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("mappings")
  private List<IidMapping> mappings = null;

  @SerializedName("processingDate")
  private OffsetDateTime processingDate = null;

  @SerializedName("projectVersionId")
  private Long projectVersionId = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NONE("NONE"),
    
    SCHED_PROCESSING("SCHED_PROCESSING"),
    
    PROCESSING("PROCESSING"),
    
    PROCESS_COMPLETE("PROCESS_COMPLETE"),
    
    ERROR_PROCESSING("ERROR_PROCESSING"),
    
    REQUIRE_AUTH("REQUIRE_AUTH"),
    
    DELETING("DELETING"),
    
    ERROR_DELETING("ERROR_DELETING"),
    
    DELETED("DELETED"),
    
    PURGING("PURGING"),
    
    PURGED("PURGED"),
    
    ERROR_PURGING("ERROR_PURGING"),
    
    DISPATCH_ANALYSIS("DISPATCH_ANALYSIS"),
    
    DISPATCH_REAUDIT("DISPATCH_REAUDIT"),
    
    ERROR_DISPATCH("ERROR_DISPATCH"),
    
    QUEUED_ANALYSIS("QUEUED_ANALYSIS"),
    
    REQUEUED_ANALYSIS("REQUEUED_ANALYSIS"),
    
    ANALYZING("ANALYZING"),
    
    ANALYSIS_COMPLETE("ANALYSIS_COMPLETE"),
    
    ERROR_ANALYZING("ERROR_ANALYZING"),
    
    UNKNOWN("UNKNOWN"),
    
    AUDIT_FAILED("AUDIT_FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  public IIDMigration artifactId(Long artifactId) {
    this.artifactId = artifactId;
    return this;
  }

   /**
   * Get artifactId
   * @return artifactId
  **/
  @ApiModelProperty(value = "")
  public Long getArtifactId() {
    return artifactId;
  }

  public void setArtifactId(Long artifactId) {
    this.artifactId = artifactId;
  }

   /**
   * IID migration id
   * @return id
  **/
  @ApiModelProperty(value = "IID migration id")
  public Long getId() {
    return id;
  }

  public IIDMigration mappings(List<IidMapping> mappings) {
    this.mappings = mappings;
    return this;
  }

  public IIDMigration addMappingsItem(IidMapping mappingsItem) {
    if (this.mappings == null) {
      this.mappings = new ArrayList<IidMapping>();
    }
    this.mappings.add(mappingsItem);
    return this;
  }

   /**
   * Get mappings
   * @return mappings
  **/
  @ApiModelProperty(value = "")
  public List<IidMapping> getMappings() {
    return mappings;
  }

  public void setMappings(List<IidMapping> mappings) {
    this.mappings = mappings;
  }

  public IIDMigration processingDate(OffsetDateTime processingDate) {
    this.processingDate = processingDate;
    return this;
  }

   /**
   * Get processingDate
   * @return processingDate
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getProcessingDate() {
    return processingDate;
  }

  public void setProcessingDate(OffsetDateTime processingDate) {
    this.processingDate = processingDate;
  }

  public IIDMigration projectVersionId(Long projectVersionId) {
    this.projectVersionId = projectVersionId;
    return this;
  }

   /**
   * Get projectVersionId
   * @return projectVersionId
  **/
  @ApiModelProperty(value = "")
  public Long getProjectVersionId() {
    return projectVersionId;
  }

  public void setProjectVersionId(Long projectVersionId) {
    this.projectVersionId = projectVersionId;
  }

  public IIDMigration status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IIDMigration iiDMigration = (IIDMigration) o;
    return Objects.equals(this.artifactId, iiDMigration.artifactId) &&
        Objects.equals(this.id, iiDMigration.id) &&
        Objects.equals(this.mappings, iiDMigration.mappings) &&
        Objects.equals(this.processingDate, iiDMigration.processingDate) &&
        Objects.equals(this.projectVersionId, iiDMigration.projectVersionId) &&
        Objects.equals(this.status, iiDMigration.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactId, id, mappings, processingDate, projectVersionId, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IIDMigration {\n");
    
    sb.append("    artifactId: ").append(toIndentedString(artifactId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mappings: ").append(toIndentedString(mappings)).append("\n");
    sb.append("    processingDate: ").append(toIndentedString(processingDate)).append("\n");
    sb.append("    projectVersionId: ").append(toIndentedString(projectVersionId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

