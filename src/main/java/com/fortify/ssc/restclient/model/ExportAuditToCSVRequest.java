/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Request of exporting audit information to CSV file
 */
@ApiModel(description = "Request of exporting audit information to CSV file")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class ExportAuditToCSVRequest {
  @SerializedName("aggregateBy")
  private String aggregateBy = null;

  @SerializedName("collapseIssues")
  private Boolean collapseIssues = null;

  @SerializedName("datasetName")
  private String datasetName = null;

  @SerializedName("fileName")
  private String fileName = null;

  @SerializedName("filter")
  private String filter = null;

  @SerializedName("filterBy")
  private String filterBy = null;

  @SerializedName("filterSet")
  private String filterSet = null;

  @SerializedName("includeCommentsInHistory")
  private Boolean includeCommentsInHistory = null;

  @SerializedName("includeHidden")
  private Boolean includeHidden = null;

  @SerializedName("includeRemoved")
  private Boolean includeRemoved = null;

  @SerializedName("includeSuppressed")
  private Boolean includeSuppressed = null;

  @SerializedName("issueSearch")
  private String issueSearch = null;

  @SerializedName("limit")
  private Integer limit = null;

  @SerializedName("note")
  private String note = null;

  @SerializedName("orderBy")
  private String orderBy = null;

  @SerializedName("projectVersionId")
  private Long projectVersionId = null;

  @SerializedName("restrictToUsersIssues")
  private Boolean restrictToUsersIssues = null;

  @SerializedName("start")
  private Integer start = null;

  @SerializedName("useShortFileNames")
  private Boolean useShortFileNames = null;

  public ExportAuditToCSVRequest aggregateBy(String aggregateBy) {
    this.aggregateBy = aggregateBy;
    return this;
  }

   /**
   * Aggregateby
   * @return aggregateBy
  **/
  @ApiModelProperty(value = "Aggregateby")
  public String getAggregateBy() {
    return aggregateBy;
  }

  public void setAggregateBy(String aggregateBy) {
    this.aggregateBy = aggregateBy;
  }

  public ExportAuditToCSVRequest collapseIssues(Boolean collapseIssues) {
    this.collapseIssues = collapseIssues;
    return this;
  }

   /**
   * Will collapse issues in exported files
   * @return collapseIssues
  **/
  @ApiModelProperty(example = "false", value = "Will collapse issues in exported files")
  public Boolean isCollapseIssues() {
    return collapseIssues;
  }

  public void setCollapseIssues(Boolean collapseIssues) {
    this.collapseIssues = collapseIssues;
  }

  public ExportAuditToCSVRequest datasetName(String datasetName) {
    this.datasetName = datasetName;
    return this;
  }

   /**
   * Dataset name (Audit)
   * @return datasetName
  **/
  @ApiModelProperty(required = true, value = "Dataset name (Audit)")
  public String getDatasetName() {
    return datasetName;
  }

  public void setDatasetName(String datasetName) {
    this.datasetName = datasetName;
  }

  public ExportAuditToCSVRequest fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * File name to save
   * @return fileName
  **/
  @ApiModelProperty(required = true, value = "File name to save")
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public ExportAuditToCSVRequest filter(String filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Filter
   * @return filter
  **/
  @ApiModelProperty(value = "Filter")
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }

  public ExportAuditToCSVRequest filterBy(String filterBy) {
    this.filterBy = filterBy;
    return this;
  }

   /**
   * Filterby
   * @return filterBy
  **/
  @ApiModelProperty(value = "Filterby")
  public String getFilterBy() {
    return filterBy;
  }

  public void setFilterBy(String filterBy) {
    this.filterBy = filterBy;
  }

  public ExportAuditToCSVRequest filterSet(String filterSet) {
    this.filterSet = filterSet;
    return this;
  }

   /**
   * Filterset
   * @return filterSet
  **/
  @ApiModelProperty(required = true, value = "Filterset")
  public String getFilterSet() {
    return filterSet;
  }

  public void setFilterSet(String filterSet) {
    this.filterSet = filterSet;
  }

  public ExportAuditToCSVRequest includeCommentsInHistory(Boolean includeCommentsInHistory) {
    this.includeCommentsInHistory = includeCommentsInHistory;
    return this;
  }

   /**
   * Will include comments in history
   * @return includeCommentsInHistory
  **/
  @ApiModelProperty(example = "false", value = "Will include comments in history")
  public Boolean isIncludeCommentsInHistory() {
    return includeCommentsInHistory;
  }

  public void setIncludeCommentsInHistory(Boolean includeCommentsInHistory) {
    this.includeCommentsInHistory = includeCommentsInHistory;
  }

  public ExportAuditToCSVRequest includeHidden(Boolean includeHidden) {
    this.includeHidden = includeHidden;
    return this;
  }

   /**
   * Will include hidden issues
   * @return includeHidden
  **/
  @ApiModelProperty(example = "false", value = "Will include hidden issues")
  public Boolean isIncludeHidden() {
    return includeHidden;
  }

  public void setIncludeHidden(Boolean includeHidden) {
    this.includeHidden = includeHidden;
  }

  public ExportAuditToCSVRequest includeRemoved(Boolean includeRemoved) {
    this.includeRemoved = includeRemoved;
    return this;
  }

   /**
   * Will include removed issues
   * @return includeRemoved
  **/
  @ApiModelProperty(example = "false", value = "Will include removed issues")
  public Boolean isIncludeRemoved() {
    return includeRemoved;
  }

  public void setIncludeRemoved(Boolean includeRemoved) {
    this.includeRemoved = includeRemoved;
  }

  public ExportAuditToCSVRequest includeSuppressed(Boolean includeSuppressed) {
    this.includeSuppressed = includeSuppressed;
    return this;
  }

   /**
   * Will include suppressed issues
   * @return includeSuppressed
  **/
  @ApiModelProperty(example = "false", value = "Will include suppressed issues")
  public Boolean isIncludeSuppressed() {
    return includeSuppressed;
  }

  public void setIncludeSuppressed(Boolean includeSuppressed) {
    this.includeSuppressed = includeSuppressed;
  }

  public ExportAuditToCSVRequest issueSearch(String issueSearch) {
    this.issueSearch = issueSearch;
    return this;
  }

   /**
   * Search issue query
   * @return issueSearch
  **/
  @ApiModelProperty(value = "Search issue query")
  public String getIssueSearch() {
    return issueSearch;
  }

  public void setIssueSearch(String issueSearch) {
    this.issueSearch = issueSearch;
  }

  public ExportAuditToCSVRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Limit
   * @return limit
  **/
  @ApiModelProperty(value = "Limit")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public ExportAuditToCSVRequest note(String note) {
    this.note = note;
    return this;
  }

   /**
   * Note
   * @return note
  **/
  @ApiModelProperty(value = "Note")
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  public ExportAuditToCSVRequest orderBy(String orderBy) {
    this.orderBy = orderBy;
    return this;
  }

   /**
   * Orderby
   * @return orderBy
  **/
  @ApiModelProperty(required = true, value = "Orderby")
  public String getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(String orderBy) {
    this.orderBy = orderBy;
  }

  public ExportAuditToCSVRequest projectVersionId(Long projectVersionId) {
    this.projectVersionId = projectVersionId;
    return this;
  }

   /**
   * ProjectVersion id to export audit data
   * @return projectVersionId
  **/
  @ApiModelProperty(required = true, value = "ProjectVersion id to export audit data")
  public Long getProjectVersionId() {
    return projectVersionId;
  }

  public void setProjectVersionId(Long projectVersionId) {
    this.projectVersionId = projectVersionId;
  }

  public ExportAuditToCSVRequest restrictToUsersIssues(Boolean restrictToUsersIssues) {
    this.restrictToUsersIssues = restrictToUsersIssues;
    return this;
  }

   /**
   * will restrict to user issues
   * @return restrictToUsersIssues
  **/
  @ApiModelProperty(example = "false", value = "will restrict to user issues")
  public Boolean isRestrictToUsersIssues() {
    return restrictToUsersIssues;
  }

  public void setRestrictToUsersIssues(Boolean restrictToUsersIssues) {
    this.restrictToUsersIssues = restrictToUsersIssues;
  }

  public ExportAuditToCSVRequest start(Integer start) {
    this.start = start;
    return this;
  }

   /**
   * Start
   * @return start
  **/
  @ApiModelProperty(value = "Start")
  public Integer getStart() {
    return start;
  }

  public void setStart(Integer start) {
    this.start = start;
  }

  public ExportAuditToCSVRequest useShortFileNames(Boolean useShortFileNames) {
    this.useShortFileNames = useShortFileNames;
    return this;
  }

   /**
   * Will use short file names
   * @return useShortFileNames
  **/
  @ApiModelProperty(example = "false", value = "Will use short file names")
  public Boolean isUseShortFileNames() {
    return useShortFileNames;
  }

  public void setUseShortFileNames(Boolean useShortFileNames) {
    this.useShortFileNames = useShortFileNames;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportAuditToCSVRequest exportAuditToCSVRequest = (ExportAuditToCSVRequest) o;
    return Objects.equals(this.aggregateBy, exportAuditToCSVRequest.aggregateBy) &&
        Objects.equals(this.collapseIssues, exportAuditToCSVRequest.collapseIssues) &&
        Objects.equals(this.datasetName, exportAuditToCSVRequest.datasetName) &&
        Objects.equals(this.fileName, exportAuditToCSVRequest.fileName) &&
        Objects.equals(this.filter, exportAuditToCSVRequest.filter) &&
        Objects.equals(this.filterBy, exportAuditToCSVRequest.filterBy) &&
        Objects.equals(this.filterSet, exportAuditToCSVRequest.filterSet) &&
        Objects.equals(this.includeCommentsInHistory, exportAuditToCSVRequest.includeCommentsInHistory) &&
        Objects.equals(this.includeHidden, exportAuditToCSVRequest.includeHidden) &&
        Objects.equals(this.includeRemoved, exportAuditToCSVRequest.includeRemoved) &&
        Objects.equals(this.includeSuppressed, exportAuditToCSVRequest.includeSuppressed) &&
        Objects.equals(this.issueSearch, exportAuditToCSVRequest.issueSearch) &&
        Objects.equals(this.limit, exportAuditToCSVRequest.limit) &&
        Objects.equals(this.note, exportAuditToCSVRequest.note) &&
        Objects.equals(this.orderBy, exportAuditToCSVRequest.orderBy) &&
        Objects.equals(this.projectVersionId, exportAuditToCSVRequest.projectVersionId) &&
        Objects.equals(this.restrictToUsersIssues, exportAuditToCSVRequest.restrictToUsersIssues) &&
        Objects.equals(this.start, exportAuditToCSVRequest.start) &&
        Objects.equals(this.useShortFileNames, exportAuditToCSVRequest.useShortFileNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregateBy, collapseIssues, datasetName, fileName, filter, filterBy, filterSet, includeCommentsInHistory, includeHidden, includeRemoved, includeSuppressed, issueSearch, limit, note, orderBy, projectVersionId, restrictToUsersIssues, start, useShortFileNames);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportAuditToCSVRequest {\n");
    
    sb.append("    aggregateBy: ").append(toIndentedString(aggregateBy)).append("\n");
    sb.append("    collapseIssues: ").append(toIndentedString(collapseIssues)).append("\n");
    sb.append("    datasetName: ").append(toIndentedString(datasetName)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    filterBy: ").append(toIndentedString(filterBy)).append("\n");
    sb.append("    filterSet: ").append(toIndentedString(filterSet)).append("\n");
    sb.append("    includeCommentsInHistory: ").append(toIndentedString(includeCommentsInHistory)).append("\n");
    sb.append("    includeHidden: ").append(toIndentedString(includeHidden)).append("\n");
    sb.append("    includeRemoved: ").append(toIndentedString(includeRemoved)).append("\n");
    sb.append("    includeSuppressed: ").append(toIndentedString(includeSuppressed)).append("\n");
    sb.append("    issueSearch: ").append(toIndentedString(issueSearch)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    projectVersionId: ").append(toIndentedString(projectVersionId)).append("\n");
    sb.append("    restrictToUsersIssues: ").append(toIndentedString(restrictToUsersIssues)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    useShortFileNames: ").append(toIndentedString(useShortFileNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

