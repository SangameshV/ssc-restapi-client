/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Token to upload or download files
 */
@ApiModel(description = "Token to upload or download files")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class FileToken {
  /**
   * Type of single-use file token
   */
  @JsonAdapter(FileTokenTypeEnum.Adapter.class)
  public enum FileTokenTypeEnum {
    UPLOAD("UPLOAD"),
    
    DOWNLOAD("DOWNLOAD"),
    
    PREVIEW_FILE("PREVIEW_FILE"),
    
    REPORT_FILE("REPORT_FILE");

    private String value;

    FileTokenTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileTokenTypeEnum fromValue(String text) {
      for (FileTokenTypeEnum b : FileTokenTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FileTokenTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileTokenTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileTokenTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FileTokenTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("fileTokenType")
  private FileTokenTypeEnum fileTokenType = null;

  @SerializedName("token")
  private String token = null;

  public FileToken fileTokenType(FileTokenTypeEnum fileTokenType) {
    this.fileTokenType = fileTokenType;
    return this;
  }

   /**
   * Type of single-use file token
   * @return fileTokenType
  **/
  @ApiModelProperty(example = "DOWNLOAD", required = true, value = "Type of single-use file token")
  public FileTokenTypeEnum getFileTokenType() {
    return fileTokenType;
  }

  public void setFileTokenType(FileTokenTypeEnum fileTokenType) {
    this.fileTokenType = fileTokenType;
  }

   /**
   * Value of single-use token to be used as the &#39;mat&#39; URL parameter during a file operation
   * @return token
  **/
  @ApiModelProperty(value = "Value of single-use token to be used as the 'mat' URL parameter during a file operation")
  public String getToken() {
    return token;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileToken fileToken = (FileToken) o;
    return Objects.equals(this.fileTokenType, fileToken.fileTokenType) &&
        Objects.equals(this.token, fileToken.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileTokenType, token);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileToken {\n");
    
    sb.append("    fileTokenType: ").append(toIndentedString(fileTokenType)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

