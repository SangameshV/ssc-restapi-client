/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Application state DTO object
 */
@ApiModel(description = "Application state DTO object")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class ApplicationState {
  @SerializedName("autoConfigurationMode")
  private Boolean autoConfigurationMode = null;

  @SerializedName("configVisitRequired")
  private Boolean configVisitRequired = null;

  @SerializedName("maintenanceMode")
  private Boolean maintenanceMode = null;

  @SerializedName("restartRequired")
  private Boolean restartRequired = null;

   /**
   * Indicates whether SSC application is in auto configuration mode
   * @return autoConfigurationMode
  **/
  @ApiModelProperty(example = "false", value = "Indicates whether SSC application is in auto configuration mode")
  public Boolean isAutoConfigurationMode() {
    return autoConfigurationMode;
  }

   /**
   * Indicates whether a config visit is needed
   * @return configVisitRequired
  **/
  @ApiModelProperty(example = "false", value = "Indicates whether a config visit is needed")
  public Boolean isConfigVisitRequired() {
    return configVisitRequired;
  }

  public ApplicationState maintenanceMode(Boolean maintenanceMode) {
    this.maintenanceMode = maintenanceMode;
    return this;
  }

   /**
   * Indicates whether SSC application is in maintenance mode
   * @return maintenanceMode
  **/
  @ApiModelProperty(example = "false", value = "Indicates whether SSC application is in maintenance mode")
  public Boolean isMaintenanceMode() {
    return maintenanceMode;
  }

  public void setMaintenanceMode(Boolean maintenanceMode) {
    this.maintenanceMode = maintenanceMode;
  }

   /**
   * Indicates whether a restart is needed
   * @return restartRequired
  **/
  @ApiModelProperty(example = "false", value = "Indicates whether a restart is needed")
  public Boolean isRestartRequired() {
    return restartRequired;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationState applicationState = (ApplicationState) o;
    return Objects.equals(this.autoConfigurationMode, applicationState.autoConfigurationMode) &&
        Objects.equals(this.configVisitRequired, applicationState.configVisitRequired) &&
        Objects.equals(this.maintenanceMode, applicationState.maintenanceMode) &&
        Objects.equals(this.restartRequired, applicationState.restartRequired);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoConfigurationMode, configVisitRequired, maintenanceMode, restartRequired);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationState {\n");
    
    sb.append("    autoConfigurationMode: ").append(toIndentedString(autoConfigurationMode)).append("\n");
    sb.append("    configVisitRequired: ").append(toIndentedString(configVisitRequired)).append("\n");
    sb.append("    maintenanceMode: ").append(toIndentedString(maintenanceMode)).append("\n");
    sb.append("    restartRequired: ").append(toIndentedString(restartRequired)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

