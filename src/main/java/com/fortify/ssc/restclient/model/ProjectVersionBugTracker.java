/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.fortify.ssc.restclient.model.BugStateManagementCfg;
import com.fortify.ssc.restclient.model.BugTracker;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Object containing project version and bug tracker related data
 */
@ApiModel(description = "Object containing project version and bug tracker related data")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class ProjectVersionBugTracker {
  @SerializedName("assignedBugtrackerShortNameIfKnown")
  private String assignedBugtrackerShortNameIfKnown = null;

  @SerializedName("assignedPluginId")
  private String assignedPluginId = null;

  @SerializedName("bugStateManagementConfig")
  private BugStateManagementCfg bugStateManagementConfig = null;

  @SerializedName("bugTracker")
  private BugTracker bugTracker = null;

  @SerializedName("bugtrackerIsAssigned")
  private Boolean bugtrackerIsAssigned = null;

  @SerializedName("clearAppVersionBugs")
  private Boolean clearAppVersionBugs = null;

  public ProjectVersionBugTracker assignedBugtrackerShortNameIfKnown(String assignedBugtrackerShortNameIfKnown) {
    this.assignedBugtrackerShortNameIfKnown = assignedBugtrackerShortNameIfKnown;
    return this;
  }

   /**
   * the short display name of the bug tracker. (will be null if no bugtracker is assigned or if there is no currently installed plugin matching the assigned pluginId.)
   * @return assignedBugtrackerShortNameIfKnown
  **/
  @ApiModelProperty(required = true, value = "the short display name of the bug tracker. (will be null if no bugtracker is assigned or if there is no currently installed plugin matching the assigned pluginId.)")
  public String getAssignedBugtrackerShortNameIfKnown() {
    return assignedBugtrackerShortNameIfKnown;
  }

  public void setAssignedBugtrackerShortNameIfKnown(String assignedBugtrackerShortNameIfKnown) {
    this.assignedBugtrackerShortNameIfKnown = assignedBugtrackerShortNameIfKnown;
  }

  public ProjectVersionBugTracker assignedPluginId(String assignedPluginId) {
    this.assignedPluginId = assignedPluginId;
    return this;
  }

   /**
   * identifier of the bug tracker plugin assigned to the application version. (Bug tracker integration will be active only if the plugin is also enabled in the system.)
   * @return assignedPluginId
  **/
  @ApiModelProperty(required = true, value = "identifier of the bug tracker plugin assigned to the application version. (Bug tracker integration will be active only if the plugin is also enabled in the system.)")
  public String getAssignedPluginId() {
    return assignedPluginId;
  }

  public void setAssignedPluginId(String assignedPluginId) {
    this.assignedPluginId = assignedPluginId;
  }

  public ProjectVersionBugTracker bugStateManagementConfig(BugStateManagementCfg bugStateManagementConfig) {
    this.bugStateManagementConfig = bugStateManagementConfig;
    return this;
  }

   /**
   * Bug state management configuration
   * @return bugStateManagementConfig
  **/
  @ApiModelProperty(required = true, value = "Bug state management configuration")
  public BugStateManagementCfg getBugStateManagementConfig() {
    return bugStateManagementConfig;
  }

  public void setBugStateManagementConfig(BugStateManagementCfg bugStateManagementConfig) {
    this.bugStateManagementConfig = bugStateManagementConfig;
  }

  public ProjectVersionBugTracker bugTracker(BugTracker bugTracker) {
    this.bugTracker = bugTracker;
    return this;
  }

   /**
   * Bug tracker (note that this field will be null if the assigned bug tracker is not enabled in the SSC plugin framework.)
   * @return bugTracker
  **/
  @ApiModelProperty(required = true, value = "Bug tracker (note that this field will be null if the assigned bug tracker is not enabled in the SSC plugin framework.)")
  public BugTracker getBugTracker() {
    return bugTracker;
  }

  public void setBugTracker(BugTracker bugTracker) {
    this.bugTracker = bugTracker;
  }

  public ProjectVersionBugTracker bugtrackerIsAssigned(Boolean bugtrackerIsAssigned) {
    this.bugtrackerIsAssigned = bugtrackerIsAssigned;
    return this;
  }

   /**
   * indicates whether a bug tracker is assigned to the application version
   * @return bugtrackerIsAssigned
  **/
  @ApiModelProperty(example = "false", required = true, value = "indicates whether a bug tracker is assigned to the application version")
  public Boolean isBugtrackerIsAssigned() {
    return bugtrackerIsAssigned;
  }

  public void setBugtrackerIsAssigned(Boolean bugtrackerIsAssigned) {
    this.bugtrackerIsAssigned = bugtrackerIsAssigned;
  }

  public ProjectVersionBugTracker clearAppVersionBugs(Boolean clearAppVersionBugs) {
    this.clearAppVersionBugs = clearAppVersionBugs;
    return this;
  }

   /**
   * Get clearAppVersionBugs
   * @return clearAppVersionBugs
  **/
  @ApiModelProperty(value = "")
  public Boolean isClearAppVersionBugs() {
    return clearAppVersionBugs;
  }

  public void setClearAppVersionBugs(Boolean clearAppVersionBugs) {
    this.clearAppVersionBugs = clearAppVersionBugs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectVersionBugTracker projectVersionBugTracker = (ProjectVersionBugTracker) o;
    return Objects.equals(this.assignedBugtrackerShortNameIfKnown, projectVersionBugTracker.assignedBugtrackerShortNameIfKnown) &&
        Objects.equals(this.assignedPluginId, projectVersionBugTracker.assignedPluginId) &&
        Objects.equals(this.bugStateManagementConfig, projectVersionBugTracker.bugStateManagementConfig) &&
        Objects.equals(this.bugTracker, projectVersionBugTracker.bugTracker) &&
        Objects.equals(this.bugtrackerIsAssigned, projectVersionBugTracker.bugtrackerIsAssigned) &&
        Objects.equals(this.clearAppVersionBugs, projectVersionBugTracker.clearAppVersionBugs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignedBugtrackerShortNameIfKnown, assignedPluginId, bugStateManagementConfig, bugTracker, bugtrackerIsAssigned, clearAppVersionBugs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectVersionBugTracker {\n");
    
    sb.append("    assignedBugtrackerShortNameIfKnown: ").append(toIndentedString(assignedBugtrackerShortNameIfKnown)).append("\n");
    sb.append("    assignedPluginId: ").append(toIndentedString(assignedPluginId)).append("\n");
    sb.append("    bugStateManagementConfig: ").append(toIndentedString(bugStateManagementConfig)).append("\n");
    sb.append("    bugTracker: ").append(toIndentedString(bugTracker)).append("\n");
    sb.append("    bugtrackerIsAssigned: ").append(toIndentedString(bugtrackerIsAssigned)).append("\n");
    sb.append("    clearAppVersionBugs: ").append(toIndentedString(clearAppVersionBugs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

