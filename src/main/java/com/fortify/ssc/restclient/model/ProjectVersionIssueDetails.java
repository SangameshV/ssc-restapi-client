/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.fortify.ssc.restclient.model.AssignedUser;
import com.fortify.ssc.restclient.model.CustomTag;
import com.fortify.ssc.restclient.model.IssuePrimaryTag;
import com.fortify.ssc.restclient.model.TraceNodeDto;
import com.fortify.ssc.restclient.model.Trigger;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Project version issue details DTO object
 */
@ApiModel(description = "Project version issue details DTO object")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class ProjectVersionIssueDetails {
  @SerializedName("accuracy")
  private Float accuracy = null;

  @SerializedName("analyzer")
  private String analyzer = null;

  @SerializedName("assignedUser")
  private AssignedUser assignedUser = null;

  @SerializedName("attackPayload")
  private String attackPayload = null;

  /**
   * Attack type
   */
  @JsonAdapter(AttackTypeEnum.Adapter.class)
  public enum AttackTypeEnum {
    URL("URL"),
    
    REQUEST_HEADER("REQUEST_HEADER"),
    
    REQUEST_COOKIE("REQUEST_COOKIE"),
    
    PARAMETER("PARAMETER"),
    
    MULTIPLE("MULTIPLE");

    private String value;

    AttackTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AttackTypeEnum fromValue(String text) {
      for (AttackTypeEnum b : AttackTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AttackTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttackTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttackTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AttackTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("attackType")
  private AttackTypeEnum attackType = null;

  @SerializedName("audited")
  private Boolean audited = null;

  @SerializedName("brief")
  private String brief = null;

  @SerializedName("className")
  private String className = null;

  @SerializedName("confidence")
  private Float confidence = null;

  @SerializedName("cookie")
  private String cookie = null;

  @SerializedName("customAttributes")
  private Object customAttributes = null;

  @SerializedName("customTagValues")
  private List<CustomTag> customTagValues = new ArrayList<CustomTag>();

  @SerializedName("dataVersion")
  private Integer dataVersion = null;

  @SerializedName("detail")
  private String detail = null;

  @SerializedName("displayEngineType")
  private String displayEngineType = null;

  @SerializedName("downloadRequest")
  private Boolean downloadRequest = null;

  @SerializedName("downloadResponse")
  private Boolean downloadResponse = null;

  /**
   * Engine category
   */
  @JsonAdapter(EngineCategoryEnum.Adapter.class)
  public enum EngineCategoryEnum {
    STATIC("STATIC"),
    
    DYNAMIC("DYNAMIC");

    private String value;

    EngineCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EngineCategoryEnum fromValue(String text) {
      for (EngineCategoryEnum b : EngineCategoryEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EngineCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EngineCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EngineCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EngineCategoryEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("engineCategory")
  private EngineCategoryEnum engineCategory = null;

  @SerializedName("engineType")
  private String engineType = null;

  @SerializedName("foundDate")
  private OffsetDateTime foundDate = null;

  @SerializedName("friority")
  private String friority = null;

  @SerializedName("fullFileName")
  private String fullFileName = null;

  @SerializedName("functionName")
  private String functionName = null;

  @SerializedName("hasViewTemplate")
  private Boolean hasViewTemplate = null;

  @SerializedName("hidden")
  private Boolean hidden = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("impact")
  private Float impact = null;

  @SerializedName("issueInstanceId")
  private String issueInstanceId = null;

  @SerializedName("issueName")
  private String issueName = null;

  @SerializedName("issueState")
  private String issueState = null;

  /**
   * Flag represents issue review status
   */
  @JsonAdapter(IssueStatusEnum.Adapter.class)
  public enum IssueStatusEnum {
    UNREVIEWED("Unreviewed"),
    
    UNDER_REVIEW("Under Review"),
    
    REVIEWED("Reviewed");

    private String value;

    IssueStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IssueStatusEnum fromValue(String text) {
      for (IssueStatusEnum b : IssueStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<IssueStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IssueStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IssueStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return IssueStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("issueStatus")
  private IssueStatusEnum issueStatus = null;

  @SerializedName("kingdom")
  private String kingdom = null;

  @SerializedName("lastScanId")
  private Long lastScanId = null;

  @SerializedName("likelihood")
  private Float likelihood = null;

  @SerializedName("lineNumber")
  private Integer lineNumber = null;

  @SerializedName("mappedCategory")
  private String mappedCategory = null;

  @SerializedName("method")
  private String method = null;

  @SerializedName("minVirtualCallConfidence")
  private Float minVirtualCallConfidence = null;

  @SerializedName("packageName")
  private String packageName = null;

  @SerializedName("primaryRuleGuid")
  private String primaryRuleGuid = null;

  @SerializedName("primaryTag")
  private IssuePrimaryTag primaryTag = null;

  @SerializedName("probability")
  private Float probability = null;

  @SerializedName("projectVersionId")
  private Long projectVersionId = null;

  @SerializedName("recommendation")
  private String recommendation = null;

  @SerializedName("references")
  private String references = null;

  @SerializedName("remediationConstant")
  private Float remediationConstant = null;

  @SerializedName("removedDate")
  private OffsetDateTime removedDate = null;

  @SerializedName("requestBody")
  private String requestBody = null;

  @SerializedName("requestHeader")
  private String requestHeader = null;

  @SerializedName("requestParameter")
  private String requestParameter = null;

  @SerializedName("requestTriggers")
  private List<Trigger> requestTriggers = null;

  @SerializedName("response")
  private String response = null;

  @SerializedName("responseHeader")
  private String responseHeader = null;

  @SerializedName("responseTriggers")
  private List<Trigger> responseTriggers = null;

  @SerializedName("revision")
  private Integer revision = null;

  @SerializedName("scanStatus")
  private String scanStatus = null;

  @SerializedName("severity")
  private Float severity = null;

  @SerializedName("shortFileName")
  private String shortFileName = null;

  @SerializedName("sink")
  private String sink = null;

  @SerializedName("sinkContext")
  private String sinkContext = null;

  @SerializedName("source")
  private String source = null;

  @SerializedName("sourceContext")
  private String sourceContext = null;

  @SerializedName("sourceFile")
  private String sourceFile = null;

  @SerializedName("sourceLine")
  private Integer sourceLine = null;

  @SerializedName("suppressed")
  private Boolean suppressed = null;

  @SerializedName("taintFlag")
  private String taintFlag = null;

  @SerializedName("tips")
  private String tips = null;

  @SerializedName("traceNodes")
  private List<List<TraceNodeDto>> traceNodes = new ArrayList<List<TraceNodeDto>>();

  @SerializedName("triggerString")
  private String triggerString = null;

  @SerializedName("url")
  private String url = null;

  @SerializedName("vulnerableParameter")
  private String vulnerableParameter = null;

   /**
   * Vulnerability accuracy
   * @return accuracy
  **/
  @ApiModelProperty(value = "Vulnerability accuracy")
  public Float getAccuracy() {
    return accuracy;
  }

  public ProjectVersionIssueDetails analyzer(String analyzer) {
    this.analyzer = analyzer;
    return this;
  }

   /**
   * Analyzer
   * @return analyzer
  **/
  @ApiModelProperty(required = true, value = "Analyzer")
  public String getAnalyzer() {
    return analyzer;
  }

  public void setAnalyzer(String analyzer) {
    this.analyzer = analyzer;
  }

  public ProjectVersionIssueDetails assignedUser(AssignedUser assignedUser) {
    this.assignedUser = assignedUser;
    return this;
  }

   /**
   * User assigned to issue
   * @return assignedUser
  **/
  @ApiModelProperty(required = true, value = "User assigned to issue")
  public AssignedUser getAssignedUser() {
    return assignedUser;
  }

  public void setAssignedUser(AssignedUser assignedUser) {
    this.assignedUser = assignedUser;
  }

  public ProjectVersionIssueDetails attackPayload(String attackPayload) {
    this.attackPayload = attackPayload;
    return this;
  }

   /**
   * Attack payload
   * @return attackPayload
  **/
  @ApiModelProperty(required = true, value = "Attack payload")
  public String getAttackPayload() {
    return attackPayload;
  }

  public void setAttackPayload(String attackPayload) {
    this.attackPayload = attackPayload;
  }

  public ProjectVersionIssueDetails attackType(AttackTypeEnum attackType) {
    this.attackType = attackType;
    return this;
  }

   /**
   * Attack type
   * @return attackType
  **/
  @ApiModelProperty(required = true, value = "Attack type")
  public AttackTypeEnum getAttackType() {
    return attackType;
  }

  public void setAttackType(AttackTypeEnum attackType) {
    this.attackType = attackType;
  }

  public ProjectVersionIssueDetails audited(Boolean audited) {
    this.audited = audited;
    return this;
  }

   /**
   * Attribute is set to true if issue is audited (primary tag values is set for this issue)
   * @return audited
  **/
  @ApiModelProperty(example = "false", required = true, value = "Attribute is set to true if issue is audited (primary tag values is set for this issue)")
  public Boolean isAudited() {
    return audited;
  }

  public void setAudited(Boolean audited) {
    this.audited = audited;
  }

  public ProjectVersionIssueDetails brief(String brief) {
    this.brief = brief;
    return this;
  }

   /**
   * Issue brief
   * @return brief
  **/
  @ApiModelProperty(required = true, value = "Issue brief")
  public String getBrief() {
    return brief;
  }

  public void setBrief(String brief) {
    this.brief = brief;
  }

   /**
   * Name of class where the vulnerability has been found
   * @return className
  **/
  @ApiModelProperty(value = "Name of class where the vulnerability has been found")
  public String getClassName() {
    return className;
  }

  public ProjectVersionIssueDetails confidence(Float confidence) {
    this.confidence = confidence;
    return this;
  }

   /**
   * Issue confidence
   * @return confidence
  **/
  @ApiModelProperty(required = true, value = "Issue confidence")
  public Float getConfidence() {
    return confidence;
  }

  public void setConfidence(Float confidence) {
    this.confidence = confidence;
  }

  public ProjectVersionIssueDetails cookie(String cookie) {
    this.cookie = cookie;
    return this;
  }

   /**
   * Cookie
   * @return cookie
  **/
  @ApiModelProperty(required = true, value = "Cookie")
  public String getCookie() {
    return cookie;
  }

  public void setCookie(String cookie) {
    this.cookie = cookie;
  }

  public ProjectVersionIssueDetails customAttributes(Object customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

   /**
   * All the additional custom attributes defined for the issue by parser plugin
   * @return customAttributes
  **/
  @ApiModelProperty(value = "All the additional custom attributes defined for the issue by parser plugin")
  public Object getCustomAttributes() {
    return customAttributes;
  }

  public void setCustomAttributes(Object customAttributes) {
    this.customAttributes = customAttributes;
  }

  public ProjectVersionIssueDetails customTagValues(List<CustomTag> customTagValues) {
    this.customTagValues = customTagValues;
    return this;
  }

  public ProjectVersionIssueDetails addCustomTagValuesItem(CustomTag customTagValuesItem) {
    this.customTagValues.add(customTagValuesItem);
    return this;
  }

   /**
   * Custom tag values
   * @return customTagValues
  **/
  @ApiModelProperty(required = true, value = "Custom tag values")
  public List<CustomTag> getCustomTagValues() {
    return customTagValues;
  }

  public void setCustomTagValues(List<CustomTag> customTagValues) {
    this.customTagValues = customTagValues;
  }

   /**
   * Version of the issue data. This attribute is initialized only for issues parsed by 3rd party parsers and is not set for the issues parsed by standard parsers included in SSC installation.
   * @return dataVersion
  **/
  @ApiModelProperty(value = "Version of the issue data. This attribute is initialized only for issues parsed by 3rd party parsers and is not set for the issues parsed by standard parsers included in SSC installation.")
  public Integer getDataVersion() {
    return dataVersion;
  }

  public ProjectVersionIssueDetails detail(String detail) {
    this.detail = detail;
    return this;
  }

   /**
   * Issue detail
   * @return detail
  **/
  @ApiModelProperty(required = true, value = "Issue detail")
  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }

  public ProjectVersionIssueDetails displayEngineType(String displayEngineType) {
    this.displayEngineType = displayEngineType;
    return this;
  }

   /**
   * Display engine type
   * @return displayEngineType
  **/
  @ApiModelProperty(required = true, value = "Display engine type")
  public String getDisplayEngineType() {
    return displayEngineType;
  }

  public void setDisplayEngineType(String displayEngineType) {
    this.displayEngineType = displayEngineType;
  }

  public ProjectVersionIssueDetails downloadRequest(Boolean downloadRequest) {
    this.downloadRequest = downloadRequest;
    return this;
  }

   /**
   * Request contains binary or large data
   * @return downloadRequest
  **/
  @ApiModelProperty(example = "false", required = true, value = "Request contains binary or large data")
  public Boolean isDownloadRequest() {
    return downloadRequest;
  }

  public void setDownloadRequest(Boolean downloadRequest) {
    this.downloadRequest = downloadRequest;
  }

  public ProjectVersionIssueDetails downloadResponse(Boolean downloadResponse) {
    this.downloadResponse = downloadResponse;
    return this;
  }

   /**
   * Response contains binary or large data\&quot;
   * @return downloadResponse
  **/
  @ApiModelProperty(example = "false", required = true, value = "Response contains binary or large data\"")
  public Boolean isDownloadResponse() {
    return downloadResponse;
  }

  public void setDownloadResponse(Boolean downloadResponse) {
    this.downloadResponse = downloadResponse;
  }

  public ProjectVersionIssueDetails engineCategory(EngineCategoryEnum engineCategory) {
    this.engineCategory = engineCategory;
    return this;
  }

   /**
   * Engine category
   * @return engineCategory
  **/
  @ApiModelProperty(required = true, value = "Engine category")
  public EngineCategoryEnum getEngineCategory() {
    return engineCategory;
  }

  public void setEngineCategory(EngineCategoryEnum engineCategory) {
    this.engineCategory = engineCategory;
  }

  public ProjectVersionIssueDetails engineType(String engineType) {
    this.engineType = engineType;
    return this;
  }

   /**
   * Engine type
   * @return engineType
  **/
  @ApiModelProperty(required = true, value = "Engine type")
  public String getEngineType() {
    return engineType;
  }

  public void setEngineType(String engineType) {
    this.engineType = engineType;
  }

  public ProjectVersionIssueDetails foundDate(OffsetDateTime foundDate) {
    this.foundDate = foundDate;
    return this;
  }

   /**
   * Issue found date
   * @return foundDate
  **/
  @ApiModelProperty(required = true, value = "Issue found date")
  public OffsetDateTime getFoundDate() {
    return foundDate;
  }

  public void setFoundDate(OffsetDateTime foundDate) {
    this.foundDate = foundDate;
  }

  public ProjectVersionIssueDetails friority(String friority) {
    this.friority = friority;
    return this;
  }

   /**
   * Fortify priority order (Friority)
   * @return friority
  **/
  @ApiModelProperty(required = true, value = "Fortify priority order (Friority)")
  public String getFriority() {
    return friority;
  }

  public void setFriority(String friority) {
    this.friority = friority;
  }

  public ProjectVersionIssueDetails fullFileName(String fullFileName) {
    this.fullFileName = fullFileName;
    return this;
  }

   /**
   * Full file name where issue found
   * @return fullFileName
  **/
  @ApiModelProperty(required = true, value = "Full file name where issue found")
  public String getFullFileName() {
    return fullFileName;
  }

  public void setFullFileName(String fullFileName) {
    this.fullFileName = fullFileName;
  }

   /**
   * Name of function located in the file where the vulnerability has been found
   * @return functionName
  **/
  @ApiModelProperty(value = "Name of function located in the file where the vulnerability has been found")
  public String getFunctionName() {
    return functionName;
  }

   /**
   * Flag that indicates if there is a view template that should be used to display issue details on UI.
   * @return hasViewTemplate
  **/
  @ApiModelProperty(example = "false", value = "Flag that indicates if there is a view template that should be used to display issue details on UI.")
  public Boolean isHasViewTemplate() {
    return hasViewTemplate;
  }

  public ProjectVersionIssueDetails hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Set to true if issue is hidden
   * @return hidden
  **/
  @ApiModelProperty(example = "false", required = true, value = "Set to true if issue is hidden")
  public Boolean isHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

   /**
   * Identifier
   * @return id
  **/
  @ApiModelProperty(value = "Identifier")
  public Long getId() {
    return id;
  }

  public ProjectVersionIssueDetails impact(Float impact) {
    this.impact = impact;
    return this;
  }

   /**
   * Issue impact
   * @return impact
  **/
  @ApiModelProperty(required = true, value = "Issue impact")
  public Float getImpact() {
    return impact;
  }

  public void setImpact(Float impact) {
    this.impact = impact;
  }

  public ProjectVersionIssueDetails issueInstanceId(String issueInstanceId) {
    this.issueInstanceId = issueInstanceId;
    return this;
  }

   /**
   * Issue instance identifier
   * @return issueInstanceId
  **/
  @ApiModelProperty(required = true, value = "Issue instance identifier")
  public String getIssueInstanceId() {
    return issueInstanceId;
  }

  public void setIssueInstanceId(String issueInstanceId) {
    this.issueInstanceId = issueInstanceId;
  }

  public ProjectVersionIssueDetails issueName(String issueName) {
    this.issueName = issueName;
    return this;
  }

   /**
   * Name of the issue category
   * @return issueName
  **/
  @ApiModelProperty(required = true, value = "Name of the issue category")
  public String getIssueName() {
    return issueName;
  }

  public void setIssueName(String issueName) {
    this.issueName = issueName;
  }

  public ProjectVersionIssueDetails issueState(String issueState) {
    this.issueState = issueState;
    return this;
  }

   /**
   * Flag represents issue state and says if issue is not an issue or open issue. Rule to calculate value of thi flag is defined in issue template.
   * @return issueState
  **/
  @ApiModelProperty(required = true, value = "Flag represents issue state and says if issue is not an issue or open issue. Rule to calculate value of thi flag is defined in issue template.")
  public String getIssueState() {
    return issueState;
  }

  public void setIssueState(String issueState) {
    this.issueState = issueState;
  }

  public ProjectVersionIssueDetails issueStatus(IssueStatusEnum issueStatus) {
    this.issueStatus = issueStatus;
    return this;
  }

   /**
   * Flag represents issue review status
   * @return issueStatus
  **/
  @ApiModelProperty(value = "Flag represents issue review status")
  public IssueStatusEnum getIssueStatus() {
    return issueStatus;
  }

  public void setIssueStatus(IssueStatusEnum issueStatus) {
    this.issueStatus = issueStatus;
  }

  public ProjectVersionIssueDetails kingdom(String kingdom) {
    this.kingdom = kingdom;
    return this;
  }

   /**
   * Issue kingdom
   * @return kingdom
  **/
  @ApiModelProperty(required = true, value = "Issue kingdom")
  public String getKingdom() {
    return kingdom;
  }

  public void setKingdom(String kingdom) {
    this.kingdom = kingdom;
  }

  public ProjectVersionIssueDetails lastScanId(Long lastScanId) {
    this.lastScanId = lastScanId;
    return this;
  }

   /**
   * ID of the latest scan that found the issue
   * @return lastScanId
  **/
  @ApiModelProperty(value = "ID of the latest scan that found the issue")
  public Long getLastScanId() {
    return lastScanId;
  }

  public void setLastScanId(Long lastScanId) {
    this.lastScanId = lastScanId;
  }

  public ProjectVersionIssueDetails likelihood(Float likelihood) {
    this.likelihood = likelihood;
    return this;
  }

   /**
   * Issue likelihood
   * @return likelihood
  **/
  @ApiModelProperty(required = true, value = "Issue likelihood")
  public Float getLikelihood() {
    return likelihood;
  }

  public void setLikelihood(Float likelihood) {
    this.likelihood = likelihood;
  }

   /**
   * Line number in the file where the vulnerability has been found
   * @return lineNumber
  **/
  @ApiModelProperty(value = "Line number in the file where the vulnerability has been found")
  public Integer getLineNumber() {
    return lineNumber;
  }

   /**
   * Name of the Fortify category of the vulnerability
   * @return mappedCategory
  **/
  @ApiModelProperty(value = "Name of the Fortify category of the vulnerability")
  public String getMappedCategory() {
    return mappedCategory;
  }

  public ProjectVersionIssueDetails method(String method) {
    this.method = method;
    return this;
  }

   /**
   * Method where issue found
   * @return method
  **/
  @ApiModelProperty(required = true, value = "Method where issue found")
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }

   /**
   * Confidence level which estimates that vulnerability found in virtual (overridden) function will be executed by tainted source
   * @return minVirtualCallConfidence
  **/
  @ApiModelProperty(value = "Confidence level which estimates that vulnerability found in virtual (overridden) function will be executed by tainted source")
  public Float getMinVirtualCallConfidence() {
    return minVirtualCallConfidence;
  }

   /**
   * Name of package where the vulnerability has been found
   * @return packageName
  **/
  @ApiModelProperty(value = "Name of package where the vulnerability has been found")
  public String getPackageName() {
    return packageName;
  }

  public ProjectVersionIssueDetails primaryRuleGuid(String primaryRuleGuid) {
    this.primaryRuleGuid = primaryRuleGuid;
    return this;
  }

   /**
   * Primary rule global unique identifier
   * @return primaryRuleGuid
  **/
  @ApiModelProperty(required = true, value = "Primary rule global unique identifier")
  public String getPrimaryRuleGuid() {
    return primaryRuleGuid;
  }

  public void setPrimaryRuleGuid(String primaryRuleGuid) {
    this.primaryRuleGuid = primaryRuleGuid;
  }

  public ProjectVersionIssueDetails primaryTag(IssuePrimaryTag primaryTag) {
    this.primaryTag = primaryTag;
    return this;
  }

   /**
   * Identifier, name and value of the custom tag that is selected as a primary tag for the project version the issue belongs to.
   * @return primaryTag
  **/
  @ApiModelProperty(value = "Identifier, name and value of the custom tag that is selected as a primary tag for the project version the issue belongs to.")
  public IssuePrimaryTag getPrimaryTag() {
    return primaryTag;
  }

  public void setPrimaryTag(IssuePrimaryTag primaryTag) {
    this.primaryTag = primaryTag;
  }

   /**
   * Vulnerability probability
   * @return probability
  **/
  @ApiModelProperty(value = "Vulnerability probability")
  public Float getProbability() {
    return probability;
  }

  public ProjectVersionIssueDetails projectVersionId(Long projectVersionId) {
    this.projectVersionId = projectVersionId;
    return this;
  }

   /**
   * Project version identifier
   * @return projectVersionId
  **/
  @ApiModelProperty(required = true, value = "Project version identifier")
  public Long getProjectVersionId() {
    return projectVersionId;
  }

  public void setProjectVersionId(Long projectVersionId) {
    this.projectVersionId = projectVersionId;
  }

  public ProjectVersionIssueDetails recommendation(String recommendation) {
    this.recommendation = recommendation;
    return this;
  }

   /**
   * Issue recommendation
   * @return recommendation
  **/
  @ApiModelProperty(required = true, value = "Issue recommendation")
  public String getRecommendation() {
    return recommendation;
  }

  public void setRecommendation(String recommendation) {
    this.recommendation = recommendation;
  }

  public ProjectVersionIssueDetails references(String references) {
    this.references = references;
    return this;
  }

   /**
   * References
   * @return references
  **/
  @ApiModelProperty(required = true, value = "References")
  public String getReferences() {
    return references;
  }

  public void setReferences(String references) {
    this.references = references;
  }

   /**
   * Level of complexity to fix this vulnerability
   * @return remediationConstant
  **/
  @ApiModelProperty(value = "Level of complexity to fix this vulnerability")
  public Float getRemediationConstant() {
    return remediationConstant;
  }

  public ProjectVersionIssueDetails removedDate(OffsetDateTime removedDate) {
    this.removedDate = removedDate;
    return this;
  }

   /**
   * Issue removed date
   * @return removedDate
  **/
  @ApiModelProperty(required = true, value = "Issue removed date")
  public OffsetDateTime getRemovedDate() {
    return removedDate;
  }

  public void setRemovedDate(OffsetDateTime removedDate) {
    this.removedDate = removedDate;
  }

  public ProjectVersionIssueDetails requestBody(String requestBody) {
    this.requestBody = requestBody;
    return this;
  }

   /**
   * Request body
   * @return requestBody
  **/
  @ApiModelProperty(required = true, value = "Request body")
  public String getRequestBody() {
    return requestBody;
  }

  public void setRequestBody(String requestBody) {
    this.requestBody = requestBody;
  }

  public ProjectVersionIssueDetails requestHeader(String requestHeader) {
    this.requestHeader = requestHeader;
    return this;
  }

   /**
   * Request header
   * @return requestHeader
  **/
  @ApiModelProperty(required = true, value = "Request header")
  public String getRequestHeader() {
    return requestHeader;
  }

  public void setRequestHeader(String requestHeader) {
    this.requestHeader = requestHeader;
  }

  public ProjectVersionIssueDetails requestParameter(String requestParameter) {
    this.requestParameter = requestParameter;
    return this;
  }

   /**
   * Request parameter
   * @return requestParameter
  **/
  @ApiModelProperty(required = true, value = "Request parameter")
  public String getRequestParameter() {
    return requestParameter;
  }

  public void setRequestParameter(String requestParameter) {
    this.requestParameter = requestParameter;
  }

  public ProjectVersionIssueDetails requestTriggers(List<Trigger> requestTriggers) {
    this.requestTriggers = requestTriggers;
    return this;
  }

  public ProjectVersionIssueDetails addRequestTriggersItem(Trigger requestTriggersItem) {
    if (this.requestTriggers == null) {
      this.requestTriggers = new ArrayList<Trigger>();
    }
    this.requestTriggers.add(requestTriggersItem);
    return this;
  }

   /**
   * Triggers in the request
   * @return requestTriggers
  **/
  @ApiModelProperty(value = "Triggers in the request")
  public List<Trigger> getRequestTriggers() {
    return requestTriggers;
  }

  public void setRequestTriggers(List<Trigger> requestTriggers) {
    this.requestTriggers = requestTriggers;
  }

  public ProjectVersionIssueDetails response(String response) {
    this.response = response;
    return this;
  }

   /**
   * Response
   * @return response
  **/
  @ApiModelProperty(required = true, value = "Response")
  public String getResponse() {
    return response;
  }

  public void setResponse(String response) {
    this.response = response;
  }

  public ProjectVersionIssueDetails responseHeader(String responseHeader) {
    this.responseHeader = responseHeader;
    return this;
  }

   /**
   * Response header
   * @return responseHeader
  **/
  @ApiModelProperty(required = true, value = "Response header")
  public String getResponseHeader() {
    return responseHeader;
  }

  public void setResponseHeader(String responseHeader) {
    this.responseHeader = responseHeader;
  }

  public ProjectVersionIssueDetails responseTriggers(List<Trigger> responseTriggers) {
    this.responseTriggers = responseTriggers;
    return this;
  }

  public ProjectVersionIssueDetails addResponseTriggersItem(Trigger responseTriggersItem) {
    if (this.responseTriggers == null) {
      this.responseTriggers = new ArrayList<Trigger>();
    }
    this.responseTriggers.add(responseTriggersItem);
    return this;
  }

   /**
   * Triggers in the response
   * @return responseTriggers
  **/
  @ApiModelProperty(value = "Triggers in the response")
  public List<Trigger> getResponseTriggers() {
    return responseTriggers;
  }

  public void setResponseTriggers(List<Trigger> responseTriggers) {
    this.responseTriggers = responseTriggers;
  }

  public ProjectVersionIssueDetails revision(Integer revision) {
    this.revision = revision;
    return this;
  }

   /**
   * Revision number
   * @return revision
  **/
  @ApiModelProperty(required = true, value = "Revision number")
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(Integer revision) {
    this.revision = revision;
  }

  public ProjectVersionIssueDetails scanStatus(String scanStatus) {
    this.scanStatus = scanStatus;
    return this;
  }

   /**
   * Scan status
   * @return scanStatus
  **/
  @ApiModelProperty(required = true, value = "Scan status")
  public String getScanStatus() {
    return scanStatus;
  }

  public void setScanStatus(String scanStatus) {
    this.scanStatus = scanStatus;
  }

  public ProjectVersionIssueDetails severity(Float severity) {
    this.severity = severity;
    return this;
  }

   /**
   * Issue severity
   * @return severity
  **/
  @ApiModelProperty(required = true, value = "Issue severity")
  public Float getSeverity() {
    return severity;
  }

  public void setSeverity(Float severity) {
    this.severity = severity;
  }

  public ProjectVersionIssueDetails shortFileName(String shortFileName) {
    this.shortFileName = shortFileName;
    return this;
  }

   /**
   * Short file name where issue found
   * @return shortFileName
  **/
  @ApiModelProperty(required = true, value = "Short file name where issue found")
  public String getShortFileName() {
    return shortFileName;
  }

  public void setShortFileName(String shortFileName) {
    this.shortFileName = shortFileName;
  }

   /**
   * Taint sink name
   * @return sink
  **/
  @ApiModelProperty(value = "Taint sink name")
  public String getSink() {
    return sink;
  }

   /**
   * Name of the context that contains vulnerability sink
   * @return sinkContext
  **/
  @ApiModelProperty(value = "Name of the context that contains vulnerability sink")
  public String getSinkContext() {
    return sinkContext;
  }

   /**
   * Name of the a program point where tainted data enter the program
   * @return source
  **/
  @ApiModelProperty(value = "Name of the a program point where tainted data enter the program")
  public String getSource() {
    return source;
  }

   /**
   * Name of the context that contains vulnerability sources
   * @return sourceContext
  **/
  @ApiModelProperty(value = "Name of the context that contains vulnerability sources")
  public String getSourceContext() {
    return sourceContext;
  }

   /**
   * File name where vulnerability source is located.
   * @return sourceFile
  **/
  @ApiModelProperty(value = "File name where vulnerability source is located.")
  public String getSourceFile() {
    return sourceFile;
  }

   /**
   * Line number in the source file where vulnerability source is located
   * @return sourceLine
  **/
  @ApiModelProperty(value = "Line number in the source file where vulnerability source is located")
  public Integer getSourceLine() {
    return sourceLine;
  }

  public ProjectVersionIssueDetails suppressed(Boolean suppressed) {
    this.suppressed = suppressed;
    return this;
  }

   /**
   * Set to true if issue is suppressed
   * @return suppressed
  **/
  @ApiModelProperty(example = "false", required = true, value = "Set to true if issue is suppressed")
  public Boolean isSuppressed() {
    return suppressed;
  }

  public void setSuppressed(Boolean suppressed) {
    this.suppressed = suppressed;
  }

   /**
   * An attribute of tainted data that enables the data flow analyzer to discriminate between different types of taint
   * @return taintFlag
  **/
  @ApiModelProperty(value = "An attribute of tainted data that enables the data flow analyzer to discriminate between different types of taint")
  public String getTaintFlag() {
    return taintFlag;
  }

  public ProjectVersionIssueDetails tips(String tips) {
    this.tips = tips;
    return this;
  }

   /**
   * Issue tips
   * @return tips
  **/
  @ApiModelProperty(required = true, value = "Issue tips")
  public String getTips() {
    return tips;
  }

  public void setTips(String tips) {
    this.tips = tips;
  }

  public ProjectVersionIssueDetails traceNodes(List<List<TraceNodeDto>> traceNodes) {
    this.traceNodes = traceNodes;
    return this;
  }

  public ProjectVersionIssueDetails addTraceNodesItem(List<TraceNodeDto> traceNodesItem) {
    this.traceNodes.add(traceNodesItem);
    return this;
  }

   /**
   * Issue trace nodes
   * @return traceNodes
  **/
  @ApiModelProperty(required = true, value = "Issue trace nodes")
  public List<List<TraceNodeDto>> getTraceNodes() {
    return traceNodes;
  }

  public void setTraceNodes(List<List<TraceNodeDto>> traceNodes) {
    this.traceNodes = traceNodes;
  }

  public ProjectVersionIssueDetails triggerString(String triggerString) {
    this.triggerString = triggerString;
    return this;
  }

   /**
   * Trigger string
   * @return triggerString
  **/
  @ApiModelProperty(required = true, value = "Trigger string")
  public String getTriggerString() {
    return triggerString;
  }

  public void setTriggerString(String triggerString) {
    this.triggerString = triggerString;
  }

  public ProjectVersionIssueDetails url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Issue url
   * @return url
  **/
  @ApiModelProperty(required = true, value = "Issue url")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public ProjectVersionIssueDetails vulnerableParameter(String vulnerableParameter) {
    this.vulnerableParameter = vulnerableParameter;
    return this;
  }

   /**
   * Vulnerable parameter
   * @return vulnerableParameter
  **/
  @ApiModelProperty(required = true, value = "Vulnerable parameter")
  public String getVulnerableParameter() {
    return vulnerableParameter;
  }

  public void setVulnerableParameter(String vulnerableParameter) {
    this.vulnerableParameter = vulnerableParameter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectVersionIssueDetails projectVersionIssueDetails = (ProjectVersionIssueDetails) o;
    return Objects.equals(this.accuracy, projectVersionIssueDetails.accuracy) &&
        Objects.equals(this.analyzer, projectVersionIssueDetails.analyzer) &&
        Objects.equals(this.assignedUser, projectVersionIssueDetails.assignedUser) &&
        Objects.equals(this.attackPayload, projectVersionIssueDetails.attackPayload) &&
        Objects.equals(this.attackType, projectVersionIssueDetails.attackType) &&
        Objects.equals(this.audited, projectVersionIssueDetails.audited) &&
        Objects.equals(this.brief, projectVersionIssueDetails.brief) &&
        Objects.equals(this.className, projectVersionIssueDetails.className) &&
        Objects.equals(this.confidence, projectVersionIssueDetails.confidence) &&
        Objects.equals(this.cookie, projectVersionIssueDetails.cookie) &&
        Objects.equals(this.customAttributes, projectVersionIssueDetails.customAttributes) &&
        Objects.equals(this.customTagValues, projectVersionIssueDetails.customTagValues) &&
        Objects.equals(this.dataVersion, projectVersionIssueDetails.dataVersion) &&
        Objects.equals(this.detail, projectVersionIssueDetails.detail) &&
        Objects.equals(this.displayEngineType, projectVersionIssueDetails.displayEngineType) &&
        Objects.equals(this.downloadRequest, projectVersionIssueDetails.downloadRequest) &&
        Objects.equals(this.downloadResponse, projectVersionIssueDetails.downloadResponse) &&
        Objects.equals(this.engineCategory, projectVersionIssueDetails.engineCategory) &&
        Objects.equals(this.engineType, projectVersionIssueDetails.engineType) &&
        Objects.equals(this.foundDate, projectVersionIssueDetails.foundDate) &&
        Objects.equals(this.friority, projectVersionIssueDetails.friority) &&
        Objects.equals(this.fullFileName, projectVersionIssueDetails.fullFileName) &&
        Objects.equals(this.functionName, projectVersionIssueDetails.functionName) &&
        Objects.equals(this.hasViewTemplate, projectVersionIssueDetails.hasViewTemplate) &&
        Objects.equals(this.hidden, projectVersionIssueDetails.hidden) &&
        Objects.equals(this.id, projectVersionIssueDetails.id) &&
        Objects.equals(this.impact, projectVersionIssueDetails.impact) &&
        Objects.equals(this.issueInstanceId, projectVersionIssueDetails.issueInstanceId) &&
        Objects.equals(this.issueName, projectVersionIssueDetails.issueName) &&
        Objects.equals(this.issueState, projectVersionIssueDetails.issueState) &&
        Objects.equals(this.issueStatus, projectVersionIssueDetails.issueStatus) &&
        Objects.equals(this.kingdom, projectVersionIssueDetails.kingdom) &&
        Objects.equals(this.lastScanId, projectVersionIssueDetails.lastScanId) &&
        Objects.equals(this.likelihood, projectVersionIssueDetails.likelihood) &&
        Objects.equals(this.lineNumber, projectVersionIssueDetails.lineNumber) &&
        Objects.equals(this.mappedCategory, projectVersionIssueDetails.mappedCategory) &&
        Objects.equals(this.method, projectVersionIssueDetails.method) &&
        Objects.equals(this.minVirtualCallConfidence, projectVersionIssueDetails.minVirtualCallConfidence) &&
        Objects.equals(this.packageName, projectVersionIssueDetails.packageName) &&
        Objects.equals(this.primaryRuleGuid, projectVersionIssueDetails.primaryRuleGuid) &&
        Objects.equals(this.primaryTag, projectVersionIssueDetails.primaryTag) &&
        Objects.equals(this.probability, projectVersionIssueDetails.probability) &&
        Objects.equals(this.projectVersionId, projectVersionIssueDetails.projectVersionId) &&
        Objects.equals(this.recommendation, projectVersionIssueDetails.recommendation) &&
        Objects.equals(this.references, projectVersionIssueDetails.references) &&
        Objects.equals(this.remediationConstant, projectVersionIssueDetails.remediationConstant) &&
        Objects.equals(this.removedDate, projectVersionIssueDetails.removedDate) &&
        Objects.equals(this.requestBody, projectVersionIssueDetails.requestBody) &&
        Objects.equals(this.requestHeader, projectVersionIssueDetails.requestHeader) &&
        Objects.equals(this.requestParameter, projectVersionIssueDetails.requestParameter) &&
        Objects.equals(this.requestTriggers, projectVersionIssueDetails.requestTriggers) &&
        Objects.equals(this.response, projectVersionIssueDetails.response) &&
        Objects.equals(this.responseHeader, projectVersionIssueDetails.responseHeader) &&
        Objects.equals(this.responseTriggers, projectVersionIssueDetails.responseTriggers) &&
        Objects.equals(this.revision, projectVersionIssueDetails.revision) &&
        Objects.equals(this.scanStatus, projectVersionIssueDetails.scanStatus) &&
        Objects.equals(this.severity, projectVersionIssueDetails.severity) &&
        Objects.equals(this.shortFileName, projectVersionIssueDetails.shortFileName) &&
        Objects.equals(this.sink, projectVersionIssueDetails.sink) &&
        Objects.equals(this.sinkContext, projectVersionIssueDetails.sinkContext) &&
        Objects.equals(this.source, projectVersionIssueDetails.source) &&
        Objects.equals(this.sourceContext, projectVersionIssueDetails.sourceContext) &&
        Objects.equals(this.sourceFile, projectVersionIssueDetails.sourceFile) &&
        Objects.equals(this.sourceLine, projectVersionIssueDetails.sourceLine) &&
        Objects.equals(this.suppressed, projectVersionIssueDetails.suppressed) &&
        Objects.equals(this.taintFlag, projectVersionIssueDetails.taintFlag) &&
        Objects.equals(this.tips, projectVersionIssueDetails.tips) &&
        Objects.equals(this.traceNodes, projectVersionIssueDetails.traceNodes) &&
        Objects.equals(this.triggerString, projectVersionIssueDetails.triggerString) &&
        Objects.equals(this.url, projectVersionIssueDetails.url) &&
        Objects.equals(this.vulnerableParameter, projectVersionIssueDetails.vulnerableParameter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accuracy, analyzer, assignedUser, attackPayload, attackType, audited, brief, className, confidence, cookie, customAttributes, customTagValues, dataVersion, detail, displayEngineType, downloadRequest, downloadResponse, engineCategory, engineType, foundDate, friority, fullFileName, functionName, hasViewTemplate, hidden, id, impact, issueInstanceId, issueName, issueState, issueStatus, kingdom, lastScanId, likelihood, lineNumber, mappedCategory, method, minVirtualCallConfidence, packageName, primaryRuleGuid, primaryTag, probability, projectVersionId, recommendation, references, remediationConstant, removedDate, requestBody, requestHeader, requestParameter, requestTriggers, response, responseHeader, responseTriggers, revision, scanStatus, severity, shortFileName, sink, sinkContext, source, sourceContext, sourceFile, sourceLine, suppressed, taintFlag, tips, traceNodes, triggerString, url, vulnerableParameter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectVersionIssueDetails {\n");
    
    sb.append("    accuracy: ").append(toIndentedString(accuracy)).append("\n");
    sb.append("    analyzer: ").append(toIndentedString(analyzer)).append("\n");
    sb.append("    assignedUser: ").append(toIndentedString(assignedUser)).append("\n");
    sb.append("    attackPayload: ").append(toIndentedString(attackPayload)).append("\n");
    sb.append("    attackType: ").append(toIndentedString(attackType)).append("\n");
    sb.append("    audited: ").append(toIndentedString(audited)).append("\n");
    sb.append("    brief: ").append(toIndentedString(brief)).append("\n");
    sb.append("    className: ").append(toIndentedString(className)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    cookie: ").append(toIndentedString(cookie)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    customTagValues: ").append(toIndentedString(customTagValues)).append("\n");
    sb.append("    dataVersion: ").append(toIndentedString(dataVersion)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    displayEngineType: ").append(toIndentedString(displayEngineType)).append("\n");
    sb.append("    downloadRequest: ").append(toIndentedString(downloadRequest)).append("\n");
    sb.append("    downloadResponse: ").append(toIndentedString(downloadResponse)).append("\n");
    sb.append("    engineCategory: ").append(toIndentedString(engineCategory)).append("\n");
    sb.append("    engineType: ").append(toIndentedString(engineType)).append("\n");
    sb.append("    foundDate: ").append(toIndentedString(foundDate)).append("\n");
    sb.append("    friority: ").append(toIndentedString(friority)).append("\n");
    sb.append("    fullFileName: ").append(toIndentedString(fullFileName)).append("\n");
    sb.append("    functionName: ").append(toIndentedString(functionName)).append("\n");
    sb.append("    hasViewTemplate: ").append(toIndentedString(hasViewTemplate)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    impact: ").append(toIndentedString(impact)).append("\n");
    sb.append("    issueInstanceId: ").append(toIndentedString(issueInstanceId)).append("\n");
    sb.append("    issueName: ").append(toIndentedString(issueName)).append("\n");
    sb.append("    issueState: ").append(toIndentedString(issueState)).append("\n");
    sb.append("    issueStatus: ").append(toIndentedString(issueStatus)).append("\n");
    sb.append("    kingdom: ").append(toIndentedString(kingdom)).append("\n");
    sb.append("    lastScanId: ").append(toIndentedString(lastScanId)).append("\n");
    sb.append("    likelihood: ").append(toIndentedString(likelihood)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("    mappedCategory: ").append(toIndentedString(mappedCategory)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    minVirtualCallConfidence: ").append(toIndentedString(minVirtualCallConfidence)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    primaryRuleGuid: ").append(toIndentedString(primaryRuleGuid)).append("\n");
    sb.append("    primaryTag: ").append(toIndentedString(primaryTag)).append("\n");
    sb.append("    probability: ").append(toIndentedString(probability)).append("\n");
    sb.append("    projectVersionId: ").append(toIndentedString(projectVersionId)).append("\n");
    sb.append("    recommendation: ").append(toIndentedString(recommendation)).append("\n");
    sb.append("    references: ").append(toIndentedString(references)).append("\n");
    sb.append("    remediationConstant: ").append(toIndentedString(remediationConstant)).append("\n");
    sb.append("    removedDate: ").append(toIndentedString(removedDate)).append("\n");
    sb.append("    requestBody: ").append(toIndentedString(requestBody)).append("\n");
    sb.append("    requestHeader: ").append(toIndentedString(requestHeader)).append("\n");
    sb.append("    requestParameter: ").append(toIndentedString(requestParameter)).append("\n");
    sb.append("    requestTriggers: ").append(toIndentedString(requestTriggers)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    responseHeader: ").append(toIndentedString(responseHeader)).append("\n");
    sb.append("    responseTriggers: ").append(toIndentedString(responseTriggers)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    scanStatus: ").append(toIndentedString(scanStatus)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    shortFileName: ").append(toIndentedString(shortFileName)).append("\n");
    sb.append("    sink: ").append(toIndentedString(sink)).append("\n");
    sb.append("    sinkContext: ").append(toIndentedString(sinkContext)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceContext: ").append(toIndentedString(sourceContext)).append("\n");
    sb.append("    sourceFile: ").append(toIndentedString(sourceFile)).append("\n");
    sb.append("    sourceLine: ").append(toIndentedString(sourceLine)).append("\n");
    sb.append("    suppressed: ").append(toIndentedString(suppressed)).append("\n");
    sb.append("    taintFlag: ").append(toIndentedString(taintFlag)).append("\n");
    sb.append("    tips: ").append(toIndentedString(tips)).append("\n");
    sb.append("    traceNodes: ").append(toIndentedString(traceNodes)).append("\n");
    sb.append("    triggerString: ").append(toIndentedString(triggerString)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    vulnerableParameter: ").append(toIndentedString(vulnerableParameter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

