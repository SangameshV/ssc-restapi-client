/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.fortify.ssc.restclient.model.EmbeddedRoles;
import com.fortify.ssc.restclient.model.UserPhoto;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * A user account that can be used to authenticate in SSC. There are currently two types of user accounts that fall into this category: SSC users and LDAP users registered with SSC.
 */
@ApiModel(description = "A user account that can be used to authenticate in SSC. There are currently two types of user accounts that fall into this category: SSC users and LDAP users registered with SSC.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class AuthenticationEntity {
  @SerializedName("_embed")
  private EmbeddedRoles embed = null;

  @SerializedName("displayName")
  private String displayName = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("entityName")
  private String entityName = null;

  @SerializedName("firstName")
  private String firstName = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("isLdap")
  private Boolean isLdap = null;

  @SerializedName("lastName")
  private String lastName = null;

  @SerializedName("ldapDn")
  private String ldapDn = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("userPhoto")
  private UserPhoto userPhoto = null;

  public AuthenticationEntity embed(EmbeddedRoles embed) {
    this.embed = embed;
    return this;
  }

   /**
   * Get embed
   * @return embed
  **/
  @ApiModelProperty(value = "")
  public EmbeddedRoles getEmbed() {
    return embed;
  }

  public void setEmbed(EmbeddedRoles embed) {
    this.embed = embed;
  }

  public AuthenticationEntity displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Display Name supports the use of wildcard matching. So, for example, \&quot;L*\&quot; will match Lando Calrissian and Lara Croft.
   * @return displayName
  **/
  @ApiModelProperty(value = "Display Name supports the use of wildcard matching. So, for example, \"L*\" will match Lando Calrissian and Lara Croft.")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public AuthenticationEntity email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @ApiModelProperty(value = "")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public AuthenticationEntity entityName(String entityName) {
    this.entityName = entityName;
    return this;
  }

   /**
   * Get entityName
   * @return entityName
  **/
  @ApiModelProperty(value = "")
  public String getEntityName() {
    return entityName;
  }

  public void setEntityName(String entityName) {
    this.entityName = entityName;
  }

  public AuthenticationEntity firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @ApiModelProperty(value = "")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

   /**
   * Authentication entity id
   * @return id
  **/
  @ApiModelProperty(value = "Authentication entity id")
  public Long getId() {
    return id;
  }

  public AuthenticationEntity isLdap(Boolean isLdap) {
    this.isLdap = isLdap;
    return this;
  }

   /**
   * Get isLdap
   * @return isLdap
  **/
  @ApiModelProperty(value = "")
  public Boolean isIsLdap() {
    return isLdap;
  }

  public void setIsLdap(Boolean isLdap) {
    this.isLdap = isLdap;
  }

  public AuthenticationEntity lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @ApiModelProperty(value = "")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public AuthenticationEntity ldapDn(String ldapDn) {
    this.ldapDn = ldapDn;
    return this;
  }

   /**
   * Distinguished Name (DN) that is only set for LDAP user accounts
   * @return ldapDn
  **/
  @ApiModelProperty(value = "Distinguished Name (DN) that is only set for LDAP user accounts")
  public String getLdapDn() {
    return ldapDn;
  }

  public void setLdapDn(String ldapDn) {
    this.ldapDn = ldapDn;
  }

  public AuthenticationEntity type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public AuthenticationEntity userPhoto(UserPhoto userPhoto) {
    this.userPhoto = userPhoto;
    return this;
  }

   /**
   * Get userPhoto
   * @return userPhoto
  **/
  @ApiModelProperty(value = "")
  public UserPhoto getUserPhoto() {
    return userPhoto;
  }

  public void setUserPhoto(UserPhoto userPhoto) {
    this.userPhoto = userPhoto;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticationEntity authenticationEntity = (AuthenticationEntity) o;
    return Objects.equals(this.embed, authenticationEntity.embed) &&
        Objects.equals(this.displayName, authenticationEntity.displayName) &&
        Objects.equals(this.email, authenticationEntity.email) &&
        Objects.equals(this.entityName, authenticationEntity.entityName) &&
        Objects.equals(this.firstName, authenticationEntity.firstName) &&
        Objects.equals(this.id, authenticationEntity.id) &&
        Objects.equals(this.isLdap, authenticationEntity.isLdap) &&
        Objects.equals(this.lastName, authenticationEntity.lastName) &&
        Objects.equals(this.ldapDn, authenticationEntity.ldapDn) &&
        Objects.equals(this.type, authenticationEntity.type) &&
        Objects.equals(this.userPhoto, authenticationEntity.userPhoto);
  }

  @Override
  public int hashCode() {
    return Objects.hash(embed, displayName, email, entityName, firstName, id, isLdap, lastName, ldapDn, type, userPhoto);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticationEntity {\n");
    
    sb.append("    embed: ").append(toIndentedString(embed)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    entityName: ").append(toIndentedString(entityName)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isLdap: ").append(toIndentedString(isLdap)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    ldapDn: ").append(toIndentedString(ldapDn)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userPhoto: ").append(toIndentedString(userPhoto)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

