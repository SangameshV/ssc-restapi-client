/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * Issue aging object contains application metrics.
 */
@ApiModel(description = "Issue aging object contains application metrics.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class IssueAgingDto {
  @SerializedName("averageDaysToRemediate")
  private Integer averageDaysToRemediate = null;

  @SerializedName("averageDaysToReview")
  private Integer averageDaysToReview = null;

  @SerializedName("bugDensity")
  private Double bugDensity = null;

  @SerializedName("filesScanned")
  private Long filesScanned = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("issuesPendingReview")
  private Long issuesPendingReview = null;

  @SerializedName("linesOfCode")
  private Long linesOfCode = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("numberOfApplicationVersions")
  private Integer numberOfApplicationVersions = null;

  @SerializedName("oldestScanDate")
  private OffsetDateTime oldestScanDate = null;

  @SerializedName("openIssues")
  private Long openIssues = null;

  @SerializedName("snapshotOutOfDate")
  private Boolean snapshotOutOfDate = null;

   /**
   * Average number of days to fix issues in application versions.
   * @return averageDaysToRemediate
  **/
  @ApiModelProperty(value = "Average number of days to fix issues in application versions.")
  public Integer getAverageDaysToRemediate() {
    return averageDaysToRemediate;
  }

   /**
   * Average number of days to review issues in application versions.
   * @return averageDaysToReview
  **/
  @ApiModelProperty(value = "Average number of days to review issues in application versions.")
  public Integer getAverageDaysToReview() {
    return averageDaysToReview;
  }

   /**
   * Bug density per 10 000 of scanned lines of code.
   * @return bugDensity
  **/
  @ApiModelProperty(value = "Bug density per 10 000 of scanned lines of code.")
  public Double getBugDensity() {
    return bugDensity;
  }

   /**
   * Number of files that were scanned in all application versions.
   * @return filesScanned
  **/
  @ApiModelProperty(value = "Number of files that were scanned in all application versions.")
  public Long getFilesScanned() {
    return filesScanned;
  }

   /**
   * This is dynamic attribute which value depend of the aggregation attribute. It can be application ID, application version ID or application version attribute GUID.
   * @return id
  **/
  @ApiModelProperty(value = "This is dynamic attribute which value depend of the aggregation attribute. It can be application ID, application version ID or application version attribute GUID.")
  public String getId() {
    return id;
  }

   /**
   * Number of issues that are pending review in all application versions.
   * @return issuesPendingReview
  **/
  @ApiModelProperty(value = "Number of issues that are pending review in all application versions.")
  public Long getIssuesPendingReview() {
    return issuesPendingReview;
  }

   /**
   * Number of lines of code that were scanned by scans which results are stored in the application versions.
   * @return linesOfCode
  **/
  @ApiModelProperty(value = "Number of lines of code that were scanned by scans which results are stored in the application versions.")
  public Long getLinesOfCode() {
    return linesOfCode;
  }

   /**
   * This is dynamic attribute which value depend of the aggregation attribute. It can be application name, application version name or application version attribute name.
   * @return name
  **/
  @ApiModelProperty(value = "This is dynamic attribute which value depend of the aggregation attribute. It can be application name, application version name or application version attribute name.")
  public String getName() {
    return name;
  }

   /**
   * Number of application versions in the application.
   * @return numberOfApplicationVersions
  **/
  @ApiModelProperty(value = "Number of application versions in the application.")
  public Integer getNumberOfApplicationVersions() {
    return numberOfApplicationVersions;
  }

   /**
   * Issue audites that have been done after this date have been taken into account for average days to review calculation.
   * @return oldestScanDate
  **/
  @ApiModelProperty(value = "Issue audites that have been done after this date have been taken into account for average days to review calculation.")
  public OffsetDateTime getOldestScanDate() {
    return oldestScanDate;
  }

   /**
   * Number of not remediated issues in all application versions.
   * @return openIssues
  **/
  @ApiModelProperty(value = "Number of not remediated issues in all application versions.")
  public Long getOpenIssues() {
    return openIssues;
  }

   /**
   * Flag that indicates that application metrics state was changed and it metrics are going to be recalculated.
   * @return snapshotOutOfDate
  **/
  @ApiModelProperty(example = "false", value = "Flag that indicates that application metrics state was changed and it metrics are going to be recalculated.")
  public Boolean isSnapshotOutOfDate() {
    return snapshotOutOfDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueAgingDto issueAgingDto = (IssueAgingDto) o;
    return Objects.equals(this.averageDaysToRemediate, issueAgingDto.averageDaysToRemediate) &&
        Objects.equals(this.averageDaysToReview, issueAgingDto.averageDaysToReview) &&
        Objects.equals(this.bugDensity, issueAgingDto.bugDensity) &&
        Objects.equals(this.filesScanned, issueAgingDto.filesScanned) &&
        Objects.equals(this.id, issueAgingDto.id) &&
        Objects.equals(this.issuesPendingReview, issueAgingDto.issuesPendingReview) &&
        Objects.equals(this.linesOfCode, issueAgingDto.linesOfCode) &&
        Objects.equals(this.name, issueAgingDto.name) &&
        Objects.equals(this.numberOfApplicationVersions, issueAgingDto.numberOfApplicationVersions) &&
        Objects.equals(this.oldestScanDate, issueAgingDto.oldestScanDate) &&
        Objects.equals(this.openIssues, issueAgingDto.openIssues) &&
        Objects.equals(this.snapshotOutOfDate, issueAgingDto.snapshotOutOfDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageDaysToRemediate, averageDaysToReview, bugDensity, filesScanned, id, issuesPendingReview, linesOfCode, name, numberOfApplicationVersions, oldestScanDate, openIssues, snapshotOutOfDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueAgingDto {\n");
    
    sb.append("    averageDaysToRemediate: ").append(toIndentedString(averageDaysToRemediate)).append("\n");
    sb.append("    averageDaysToReview: ").append(toIndentedString(averageDaysToReview)).append("\n");
    sb.append("    bugDensity: ").append(toIndentedString(bugDensity)).append("\n");
    sb.append("    filesScanned: ").append(toIndentedString(filesScanned)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuesPendingReview: ").append(toIndentedString(issuesPendingReview)).append("\n");
    sb.append("    linesOfCode: ").append(toIndentedString(linesOfCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberOfApplicationVersions: ").append(toIndentedString(numberOfApplicationVersions)).append("\n");
    sb.append("    oldestScanDate: ").append(toIndentedString(oldestScanDate)).append("\n");
    sb.append("    openIssues: ").append(toIndentedString(openIssues)).append("\n");
    sb.append("    snapshotOutOfDate: ").append(toIndentedString(snapshotOutOfDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

