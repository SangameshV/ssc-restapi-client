/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.fortify.ssc.restclient.model.Role;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * Local User DTO object
 */
@ApiModel(description = "Local User DTO object")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class LocalUser {
  @SerializedName("adminPassword")
  private String adminPassword = null;

  @SerializedName("clearPassword")
  private String clearPassword = null;

  @SerializedName("dateFrozen")
  private OffsetDateTime dateFrozen = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("failedLoginAttempts")
  private Integer failedLoginAttempts = null;

  @SerializedName("firstName")
  private String firstName = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("lastName")
  private String lastName = null;

  @SerializedName("passwordNeverExpire")
  private Boolean passwordNeverExpire = null;

  @SerializedName("requirePasswordChange")
  private Boolean requirePasswordChange = null;

  @SerializedName("roles")
  private List<Role> roles = new ArrayList<Role>();

  @SerializedName("suspended")
  private Boolean suspended = null;

  @SerializedName("userName")
  private String userName = null;

  public LocalUser adminPassword(String adminPassword) {
    this.adminPassword = adminPassword;
    return this;
  }

   /**
   * Get adminPassword
   * @return adminPassword
  **/
  @ApiModelProperty(value = "")
  public String getAdminPassword() {
    return adminPassword;
  }

  public void setAdminPassword(String adminPassword) {
    this.adminPassword = adminPassword;
  }

  public LocalUser clearPassword(String clearPassword) {
    this.clearPassword = clearPassword;
    return this;
  }

   /**
   * Get clearPassword
   * @return clearPassword
  **/
  @ApiModelProperty(value = "")
  public String getClearPassword() {
    return clearPassword;
  }

  public void setClearPassword(String clearPassword) {
    this.clearPassword = clearPassword;
  }

  public LocalUser dateFrozen(OffsetDateTime dateFrozen) {
    this.dateFrozen = dateFrozen;
    return this;
  }

   /**
   * Date user&#39;s account was frozen
   * @return dateFrozen
  **/
  @ApiModelProperty(required = true, value = "Date user's account was frozen")
  public OffsetDateTime getDateFrozen() {
    return dateFrozen;
  }

  public void setDateFrozen(OffsetDateTime dateFrozen) {
    this.dateFrozen = dateFrozen;
  }

  public LocalUser email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @ApiModelProperty(required = true, value = "")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public LocalUser failedLoginAttempts(Integer failedLoginAttempts) {
    this.failedLoginAttempts = failedLoginAttempts;
    return this;
  }

   /**
   * Number of failed login attempts
   * @return failedLoginAttempts
  **/
  @ApiModelProperty(required = true, value = "Number of failed login attempts")
  public Integer getFailedLoginAttempts() {
    return failedLoginAttempts;
  }

  public void setFailedLoginAttempts(Integer failedLoginAttempts) {
    this.failedLoginAttempts = failedLoginAttempts;
  }

  public LocalUser firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @ApiModelProperty(required = true, value = "")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

   /**
   * ID required when referencing an existing Local User
   * @return id
  **/
  @ApiModelProperty(value = "ID required when referencing an existing Local User")
  public Long getId() {
    return id;
  }

  public LocalUser lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @ApiModelProperty(required = true, value = "")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public LocalUser passwordNeverExpire(Boolean passwordNeverExpire) {
    this.passwordNeverExpire = passwordNeverExpire;
    return this;
  }

   /**
   * True if user&#39;s password never expires
   * @return passwordNeverExpire
  **/
  @ApiModelProperty(example = "false", required = true, value = "True if user's password never expires")
  public Boolean isPasswordNeverExpire() {
    return passwordNeverExpire;
  }

  public void setPasswordNeverExpire(Boolean passwordNeverExpire) {
    this.passwordNeverExpire = passwordNeverExpire;
  }

  public LocalUser requirePasswordChange(Boolean requirePasswordChange) {
    this.requirePasswordChange = requirePasswordChange;
    return this;
  }

   /**
   * Is user required to change password on first login?
   * @return requirePasswordChange
  **/
  @ApiModelProperty(example = "false", required = true, value = "Is user required to change password on first login?")
  public Boolean isRequirePasswordChange() {
    return requirePasswordChange;
  }

  public void setRequirePasswordChange(Boolean requirePasswordChange) {
    this.requirePasswordChange = requirePasswordChange;
  }

  public LocalUser roles(List<Role> roles) {
    this.roles = roles;
    return this;
  }

  public LocalUser addRolesItem(Role rolesItem) {
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * List of Roles assigned to user
   * @return roles
  **/
  @ApiModelProperty(required = true, value = "List of Roles assigned to user")
  public List<Role> getRoles() {
    return roles;
  }

  public void setRoles(List<Role> roles) {
    this.roles = roles;
  }

  public LocalUser suspended(Boolean suspended) {
    this.suspended = suspended;
    return this;
  }

   /**
   * True if user&#39;s account is locked
   * @return suspended
  **/
  @ApiModelProperty(example = "false", required = true, value = "True if user's account is locked")
  public Boolean isSuspended() {
    return suspended;
  }

  public void setSuspended(Boolean suspended) {
    this.suspended = suspended;
  }

  public LocalUser userName(String userName) {
    this.userName = userName;
    return this;
  }

   /**
   * Get userName
   * @return userName
  **/
  @ApiModelProperty(required = true, value = "")
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocalUser localUser = (LocalUser) o;
    return Objects.equals(this.adminPassword, localUser.adminPassword) &&
        Objects.equals(this.clearPassword, localUser.clearPassword) &&
        Objects.equals(this.dateFrozen, localUser.dateFrozen) &&
        Objects.equals(this.email, localUser.email) &&
        Objects.equals(this.failedLoginAttempts, localUser.failedLoginAttempts) &&
        Objects.equals(this.firstName, localUser.firstName) &&
        Objects.equals(this.id, localUser.id) &&
        Objects.equals(this.lastName, localUser.lastName) &&
        Objects.equals(this.passwordNeverExpire, localUser.passwordNeverExpire) &&
        Objects.equals(this.requirePasswordChange, localUser.requirePasswordChange) &&
        Objects.equals(this.roles, localUser.roles) &&
        Objects.equals(this.suspended, localUser.suspended) &&
        Objects.equals(this.userName, localUser.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminPassword, clearPassword, dateFrozen, email, failedLoginAttempts, firstName, id, lastName, passwordNeverExpire, requirePasswordChange, roles, suspended, userName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocalUser {\n");
    
    sb.append("    adminPassword: ").append(toIndentedString(adminPassword)).append("\n");
    sb.append("    clearPassword: ").append(toIndentedString(clearPassword)).append("\n");
    sb.append("    dateFrozen: ").append(toIndentedString(dateFrozen)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    failedLoginAttempts: ").append(toIndentedString(failedLoginAttempts)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    passwordNeverExpire: ").append(toIndentedString(passwordNeverExpire)).append("\n");
    sb.append("    requirePasswordChange: ").append(toIndentedString(requirePasswordChange)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

