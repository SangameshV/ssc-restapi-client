/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * Data Export DTO object
 */
@ApiModel(description = "Data Export DTO object")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class DataExport {
  @SerializedName("appVersionId")
  private Long appVersionId = null;

  @SerializedName("appVersionName")
  private String appVersionName = null;

  @SerializedName("datasetName")
  private String datasetName = null;

  @SerializedName("documentInfoId")
  private Long documentInfoId = null;

  @SerializedName("expiration")
  private Integer expiration = null;

  @SerializedName("exportDate")
  private OffsetDateTime exportDate = null;

  @SerializedName("fileName")
  private String fileName = null;

  @SerializedName("fileType")
  private String fileType = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("note")
  private String note = null;

  /**
   * Data export status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STARTED("EXPORT_PROCESS_STARTED"),
    
    COMPLETED("EXPORT_PROCESS_COMPLETED"),
    
    FAILED("EXPORT_PROCESS_FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("userName")
  private String userName = null;

  public DataExport appVersionId(Long appVersionId) {
    this.appVersionId = appVersionId;
    return this;
  }

   /**
   * Application version id - required if DatasetName &#x3D; \&quot;Audit\&quot;
   * @return appVersionId
  **/
  @ApiModelProperty(value = "Application version id - required if DatasetName = \"Audit\"")
  public Long getAppVersionId() {
    return appVersionId;
  }

  public void setAppVersionId(Long appVersionId) {
    this.appVersionId = appVersionId;
  }

  public DataExport appVersionName(String appVersionName) {
    this.appVersionName = appVersionName;
    return this;
  }

   /**
   * Application version name
   * @return appVersionName
  **/
  @ApiModelProperty(value = "Application version name")
  public String getAppVersionName() {
    return appVersionName;
  }

  public void setAppVersionName(String appVersionName) {
    this.appVersionName = appVersionName;
  }

  public DataExport datasetName(String datasetName) {
    this.datasetName = datasetName;
    return this;
  }

   /**
   * Dataset name - e.g. \&quot;Audit\&quot;, \&quot;Issue Stats\&quot; - corresponds to page from which data is exported
   * @return datasetName
  **/
  @ApiModelProperty(required = true, value = "Dataset name - e.g. \"Audit\", \"Issue Stats\" - corresponds to page from which data is exported")
  public String getDatasetName() {
    return datasetName;
  }

  public void setDatasetName(String datasetName) {
    this.datasetName = datasetName;
  }

  public DataExport documentInfoId(Long documentInfoId) {
    this.documentInfoId = documentInfoId;
    return this;
  }

   /**
   * Document Info id for file blob
   * @return documentInfoId
  **/
  @ApiModelProperty(value = "Document Info id for file blob")
  public Long getDocumentInfoId() {
    return documentInfoId;
  }

  public void setDocumentInfoId(Long documentInfoId) {
    this.documentInfoId = documentInfoId;
  }

  public DataExport expiration(Integer expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * Data export file expiration in days
   * @return expiration
  **/
  @ApiModelProperty(value = "Data export file expiration in days")
  public Integer getExpiration() {
    return expiration;
  }

  public void setExpiration(Integer expiration) {
    this.expiration = expiration;
  }

  public DataExport exportDate(OffsetDateTime exportDate) {
    this.exportDate = exportDate;
    return this;
  }

   /**
   * Export date
   * @return exportDate
  **/
  @ApiModelProperty(value = "Export date")
  public OffsetDateTime getExportDate() {
    return exportDate;
  }

  public void setExportDate(OffsetDateTime exportDate) {
    this.exportDate = exportDate;
  }

  public DataExport fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * Name of data export file
   * @return fileName
  **/
  @ApiModelProperty(required = true, value = "Name of data export file")
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public DataExport fileType(String fileType) {
    this.fileType = fileType;
    return this;
  }

   /**
   * File type, e.g. CSV
   * @return fileType
  **/
  @ApiModelProperty(value = "File type, e.g. CSV")
  public String getFileType() {
    return fileType;
  }

  public void setFileType(String fileType) {
    this.fileType = fileType;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Long getId() {
    return id;
  }

  public DataExport note(String note) {
    this.note = note;
    return this;
  }

   /**
   * Note, i.e. comments or info related to data being exported
   * @return note
  **/
  @ApiModelProperty(value = "Note, i.e. comments or info related to data being exported")
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  public DataExport status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Data export status
   * @return status
  **/
  @ApiModelProperty(value = "Data export status")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public DataExport userName(String userName) {
    this.userName = userName;
    return this;
  }

   /**
   * User name of user who initiated the data export
   * @return userName
  **/
  @ApiModelProperty(value = "User name of user who initiated the data export")
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataExport dataExport = (DataExport) o;
    return Objects.equals(this.appVersionId, dataExport.appVersionId) &&
        Objects.equals(this.appVersionName, dataExport.appVersionName) &&
        Objects.equals(this.datasetName, dataExport.datasetName) &&
        Objects.equals(this.documentInfoId, dataExport.documentInfoId) &&
        Objects.equals(this.expiration, dataExport.expiration) &&
        Objects.equals(this.exportDate, dataExport.exportDate) &&
        Objects.equals(this.fileName, dataExport.fileName) &&
        Objects.equals(this.fileType, dataExport.fileType) &&
        Objects.equals(this.id, dataExport.id) &&
        Objects.equals(this.note, dataExport.note) &&
        Objects.equals(this.status, dataExport.status) &&
        Objects.equals(this.userName, dataExport.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appVersionId, appVersionName, datasetName, documentInfoId, expiration, exportDate, fileName, fileType, id, note, status, userName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataExport {\n");
    
    sb.append("    appVersionId: ").append(toIndentedString(appVersionId)).append("\n");
    sb.append("    appVersionName: ").append(toIndentedString(appVersionName)).append("\n");
    sb.append("    datasetName: ").append(toIndentedString(datasetName)).append("\n");
    sb.append("    documentInfoId: ").append(toIndentedString(documentInfoId)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    exportDate: ").append(toIndentedString(exportDate)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

