/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.fortify.ssc.restclient.model.CustomTagLookup;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CustomTag
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class CustomTag {
  /**
   * Custom tag type.
   */
  @JsonAdapter(CustomTagTypeEnum.Adapter.class)
  public enum CustomTagTypeEnum {
    UNKNOWN("UNKNOWN"),
    
    CUSTOM("CUSTOM"),
    
    HYBRID("HYBRID"),
    
    METAGROUP("METAGROUP"),
    
    SYSTEM("SYSTEM"),
    
    AUDITASSISTANT("AUDITASSISTANT");

    private String value;

    CustomTagTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomTagTypeEnum fromValue(String text) {
      for (CustomTagTypeEnum b : CustomTagTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CustomTagTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomTagTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomTagTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CustomTagTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("customTagType")
  private CustomTagTypeEnum customTagType = null;

  @SerializedName("defaultValue")
  private String defaultValue = null;

  @SerializedName("defaultValueIndex")
  private Integer defaultValueIndex = null;

  @SerializedName("deletable")
  private Boolean deletable = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("extensible")
  private Boolean extensible = null;

  @SerializedName("guid")
  private String guid = null;

  @SerializedName("hidden")
  private Boolean hidden = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("inUse")
  private Boolean inUse = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("objectVersion")
  private Integer objectVersion = null;

  @SerializedName("primaryTag")
  private Boolean primaryTag = null;

  @SerializedName("restriction")
  private Boolean restriction = null;

  /**
   * Special permission type if restriction is set to TRUE.
   */
  @JsonAdapter(RestrictionTypeEnum.Adapter.class)
  public enum RestrictionTypeEnum {
    NONE("NONE"),
    
    RESTRICTED("RESTRICTED"),
    
    READONLY("READONLY");

    private String value;

    RestrictionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RestrictionTypeEnum fromValue(String text) {
      for (RestrictionTypeEnum b : RestrictionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RestrictionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RestrictionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RestrictionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RestrictionTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("restrictionType")
  private RestrictionTypeEnum restrictionType = null;

  @SerializedName("valueList")
  private List<CustomTagLookup> valueList = null;

  /**
   * Custom tag value type.
   */
  @JsonAdapter(ValueTypeEnum.Adapter.class)
  public enum ValueTypeEnum {
    LIST("LIST"),
    
    DECIMAL("DECIMAL"),
    
    DATE("DATE"),
    
    TEXT("TEXT");

    private String value;

    ValueTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ValueTypeEnum fromValue(String text) {
      for (ValueTypeEnum b : ValueTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ValueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ValueTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ValueTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ValueTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("valueType")
  private ValueTypeEnum valueType = null;

  public CustomTag customTagType(CustomTagTypeEnum customTagType) {
    this.customTagType = customTagType;
    return this;
  }

   /**
   * Custom tag type.
   * @return customTagType
  **/
  @ApiModelProperty(required = true, value = "Custom tag type.")
  public CustomTagTypeEnum getCustomTagType() {
    return customTagType;
  }

  public void setCustomTagType(CustomTagTypeEnum customTagType) {
    this.customTagType = customTagType;
  }

   /**
   * Default value of the custom tag. Actual string value is presented here.
   * @return defaultValue
  **/
  @ApiModelProperty(value = "Default value of the custom tag. Actual string value is presented here.")
  public String getDefaultValue() {
    return defaultValue;
  }

  public CustomTag defaultValueIndex(Integer defaultValueIndex) {
    this.defaultValueIndex = defaultValueIndex;
    return this;
  }

   /**
   * Index of default value of the custom tag. This is ordinal number of the item in CustomTagLookup collection.
   * @return defaultValueIndex
  **/
  @ApiModelProperty(value = "Index of default value of the custom tag. This is ordinal number of the item in CustomTagLookup collection.")
  public Integer getDefaultValueIndex() {
    return defaultValueIndex;
  }

  public void setDefaultValueIndex(Integer defaultValueIndex) {
    this.defaultValueIndex = defaultValueIndex;
  }

   /**
   * Flag that says if custom tag can be deleted. Custom tag which values are currently in use cannot be deleted.
   * @return deletable
  **/
  @ApiModelProperty(example = "false", value = "Flag that says if custom tag can be deleted. Custom tag which values are currently in use cannot be deleted.")
  public Boolean isDeletable() {
    return deletable;
  }

  public CustomTag description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Custom tag description.
   * @return description
  **/
  @ApiModelProperty(value = "Custom tag description.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CustomTag extensible(Boolean extensible) {
    this.extensible = extensible;
    return this;
  }

   /**
   * Flag that says if custom tag is extensible or not.
   * @return extensible
  **/
  @ApiModelProperty(example = "false", required = true, value = "Flag that says if custom tag is extensible or not.")
  public Boolean isExtensible() {
    return extensible;
  }

  public void setExtensible(Boolean extensible) {
    this.extensible = extensible;
  }

   /**
   * Custom tag GUID.
   * @return guid
  **/
  @ApiModelProperty(required = true, value = "Custom tag GUID.")
  public String getGuid() {
    return guid;
  }

  public CustomTag hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Is custom tag hidden or not.
   * @return hidden
  **/
  @ApiModelProperty(example = "false", required = true, value = "Is custom tag hidden or not.")
  public Boolean isHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

   /**
   * Custom tag id
   * @return id
  **/
  @ApiModelProperty(value = "Custom tag id")
  public Long getId() {
    return id;
  }

   /**
   * Is custom tag values are selected for any issues in the system.
   * @return inUse
  **/
  @ApiModelProperty(example = "false", value = "Is custom tag values are selected for any issues in the system.")
  public Boolean isInUse() {
    return inUse;
  }

  public CustomTag name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Custom tag unique name.
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Custom tag unique name.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

   /**
   * Custom tag version stored on the server. This value is used for optimistic locking of the custom tag object to prevent concurrent modification of the custom tag by different users at the same time.
   * @return objectVersion
  **/
  @ApiModelProperty(required = true, value = "Custom tag version stored on the server. This value is used for optimistic locking of the custom tag object to prevent concurrent modification of the custom tag by different users at the same time.")
  public Integer getObjectVersion() {
    return objectVersion;
  }

   /**
   * If this custom tag is set as primary tag for a specific project version. This value is initialized only if custom tags for specific project version are requested.
   * @return primaryTag
  **/
  @ApiModelProperty(example = "false", value = "If this custom tag is set as primary tag for a specific project version. This value is initialized only if custom tags for specific project version are requested.")
  public Boolean isPrimaryTag() {
    return primaryTag;
  }

  public CustomTag restriction(Boolean restriction) {
    this.restriction = restriction;
    return this;
  }

   /**
   * Flag is set to true if special permission is required to set values of this custom tag.
   * @return restriction
  **/
  @ApiModelProperty(example = "false", value = "Flag is set to true if special permission is required to set values of this custom tag.")
  public Boolean isRestriction() {
    return restriction;
  }

  public void setRestriction(Boolean restriction) {
    this.restriction = restriction;
  }

  public CustomTag restrictionType(RestrictionTypeEnum restrictionType) {
    this.restrictionType = restrictionType;
    return this;
  }

   /**
   * Special permission type if restriction is set to TRUE.
   * @return restrictionType
  **/
  @ApiModelProperty(value = "Special permission type if restriction is set to TRUE.")
  public RestrictionTypeEnum getRestrictionType() {
    return restrictionType;
  }

  public void setRestrictionType(RestrictionTypeEnum restrictionType) {
    this.restrictionType = restrictionType;
  }

  public CustomTag valueList(List<CustomTagLookup> valueList) {
    this.valueList = valueList;
    return this;
  }

  public CustomTag addValueListItem(CustomTagLookup valueListItem) {
    if (this.valueList == null) {
      this.valueList = new ArrayList<CustomTagLookup>();
    }
    this.valueList.add(valueListItem);
    return this;
  }

   /**
   * Collection of all possible custom tag values.
   * @return valueList
  **/
  @ApiModelProperty(value = "Collection of all possible custom tag values.")
  public List<CustomTagLookup> getValueList() {
    return valueList;
  }

  public void setValueList(List<CustomTagLookup> valueList) {
    this.valueList = valueList;
  }

  public CustomTag valueType(ValueTypeEnum valueType) {
    this.valueType = valueType;
    return this;
  }

   /**
   * Custom tag value type.
   * @return valueType
  **/
  @ApiModelProperty(required = true, value = "Custom tag value type.")
  public ValueTypeEnum getValueType() {
    return valueType;
  }

  public void setValueType(ValueTypeEnum valueType) {
    this.valueType = valueType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomTag customTag = (CustomTag) o;
    return Objects.equals(this.customTagType, customTag.customTagType) &&
        Objects.equals(this.defaultValue, customTag.defaultValue) &&
        Objects.equals(this.defaultValueIndex, customTag.defaultValueIndex) &&
        Objects.equals(this.deletable, customTag.deletable) &&
        Objects.equals(this.description, customTag.description) &&
        Objects.equals(this.extensible, customTag.extensible) &&
        Objects.equals(this.guid, customTag.guid) &&
        Objects.equals(this.hidden, customTag.hidden) &&
        Objects.equals(this.id, customTag.id) &&
        Objects.equals(this.inUse, customTag.inUse) &&
        Objects.equals(this.name, customTag.name) &&
        Objects.equals(this.objectVersion, customTag.objectVersion) &&
        Objects.equals(this.primaryTag, customTag.primaryTag) &&
        Objects.equals(this.restriction, customTag.restriction) &&
        Objects.equals(this.restrictionType, customTag.restrictionType) &&
        Objects.equals(this.valueList, customTag.valueList) &&
        Objects.equals(this.valueType, customTag.valueType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customTagType, defaultValue, defaultValueIndex, deletable, description, extensible, guid, hidden, id, inUse, name, objectVersion, primaryTag, restriction, restrictionType, valueList, valueType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomTag {\n");
    
    sb.append("    customTagType: ").append(toIndentedString(customTagType)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    defaultValueIndex: ").append(toIndentedString(defaultValueIndex)).append("\n");
    sb.append("    deletable: ").append(toIndentedString(deletable)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    extensible: ").append(toIndentedString(extensible)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inUse: ").append(toIndentedString(inUse)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    objectVersion: ").append(toIndentedString(objectVersion)).append("\n");
    sb.append("    primaryTag: ").append(toIndentedString(primaryTag)).append("\n");
    sb.append("    restriction: ").append(toIndentedString(restriction)).append("\n");
    sb.append("    restrictionType: ").append(toIndentedString(restrictionType)).append("\n");
    sb.append("    valueList: ").append(toIndentedString(valueList)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

