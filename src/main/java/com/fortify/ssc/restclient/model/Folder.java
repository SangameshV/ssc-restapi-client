/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Folder
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class Folder {
  @SerializedName("color")
  private String color = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("editable")
  private Boolean editable = null;

  @SerializedName("guid")
  private String guid = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("orderIndex")
  private Integer orderIndex = null;

  @SerializedName("projectVersionId")
  private Long projectVersionId = null;

   /**
   * Color that should be used to represent folder on UI
   * @return color
  **/
  @ApiModelProperty(value = "Color that should be used to represent folder on UI")
  public String getColor() {
    return color;
  }

   /**
   * Folder description
   * @return description
  **/
  @ApiModelProperty(value = "Folder description")
  public String getDescription() {
    return description;
  }

   /**
   * Is folder editable
   * @return editable
  **/
  @ApiModelProperty(example = "false", value = "Is folder editable")
  public Boolean isEditable() {
    return editable;
  }

   /**
   * Folder GUID. Guid is unique across all the folders defined for a project version
   * @return guid
  **/
  @ApiModelProperty(value = "Folder GUID. Guid is unique across all the folders defined for a project version")
  public String getGuid() {
    return guid;
  }

   /**
   * Folder id
   * @return id
  **/
  @ApiModelProperty(value = "Folder id")
  public Long getId() {
    return id;
  }

   /**
   * Folder name
   * @return name
  **/
  @ApiModelProperty(value = "Folder name")
  public String getName() {
    return name;
  }

   /**
   * Numeric value used for ordering folder from the most important to the least important
   * @return orderIndex
  **/
  @ApiModelProperty(value = "Numeric value used for ordering folder from the most important to the least important")
  public Integer getOrderIndex() {
    return orderIndex;
  }

   /**
   * ID of the project version for which folder is defined
   * @return projectVersionId
  **/
  @ApiModelProperty(value = "ID of the project version for which folder is defined")
  public Long getProjectVersionId() {
    return projectVersionId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Folder folder = (Folder) o;
    return Objects.equals(this.color, folder.color) &&
        Objects.equals(this.description, folder.description) &&
        Objects.equals(this.editable, folder.editable) &&
        Objects.equals(this.guid, folder.guid) &&
        Objects.equals(this.id, folder.id) &&
        Objects.equals(this.name, folder.name) &&
        Objects.equals(this.orderIndex, folder.orderIndex) &&
        Objects.equals(this.projectVersionId, folder.projectVersionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, description, editable, guid, id, name, orderIndex, projectVersionId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Folder {\n");
    
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    editable: ").append(toIndentedString(editable)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orderIndex: ").append(toIndentedString(orderIndex)).append("\n");
    sb.append("    projectVersionId: ").append(toIndentedString(projectVersionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

