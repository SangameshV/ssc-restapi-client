/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Source file content where vulnerabilities were found.
 */
@ApiModel(description = "Source file content where vulnerabilities were found.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-07-09T13:54:27.094-07:00")
public class SourceFileDto {
  @SerializedName("checksum")
  private String checksum = null;

  @SerializedName("encoding")
  private String encoding = null;

  @SerializedName("fileContent")
  private String fileContent = null;

  @SerializedName("filePath")
  private String filePath = null;

  @SerializedName("languageName")
  private String languageName = null;

  @SerializedName("projectVersionId")
  private Long projectVersionId = null;

   /**
   * Source file checksum.
   * @return checksum
  **/
  @ApiModelProperty(required = true, value = "Source file checksum.")
  public String getChecksum() {
    return checksum;
  }

   /**
   * Source file encoding.
   * @return encoding
  **/
  @ApiModelProperty(required = true, value = "Source file encoding.")
  public String getEncoding() {
    return encoding;
  }

   /**
   * Scanned source file content.
   * @return fileContent
  **/
  @ApiModelProperty(required = true, value = "Scanned source file content.")
  public String getFileContent() {
    return fileContent;
  }

   /**
   * Full path to source file on the machine where scan was performed.
   * @return filePath
  **/
  @ApiModelProperty(required = true, value = "Full path to source file on the machine where scan was performed.")
  public String getFilePath() {
    return filePath;
  }

   /**
   * Source file programming language name.
   * @return languageName
  **/
  @ApiModelProperty(required = true, value = "Source file programming language name.")
  public String getLanguageName() {
    return languageName;
  }

   /**
   * Project version identifier that contains this source file.
   * @return projectVersionId
  **/
  @ApiModelProperty(required = true, value = "Project version identifier that contains this source file.")
  public Long getProjectVersionId() {
    return projectVersionId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceFileDto sourceFileDto = (SourceFileDto) o;
    return Objects.equals(this.checksum, sourceFileDto.checksum) &&
        Objects.equals(this.encoding, sourceFileDto.encoding) &&
        Objects.equals(this.fileContent, sourceFileDto.fileContent) &&
        Objects.equals(this.filePath, sourceFileDto.filePath) &&
        Objects.equals(this.languageName, sourceFileDto.languageName) &&
        Objects.equals(this.projectVersionId, sourceFileDto.projectVersionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checksum, encoding, fileContent, filePath, languageName, projectVersionId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceFileDto {\n");
    
    sb.append("    checksum: ").append(toIndentedString(checksum)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    fileContent: ").append(toIndentedString(fileContent)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    languageName: ").append(toIndentedString(languageName)).append("\n");
    sb.append("    projectVersionId: ").append(toIndentedString(projectVersionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

