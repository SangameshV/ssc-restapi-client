/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.api;

import com.fortify.ssc.restclient.ApiCallback;
import com.fortify.ssc.restclient.ApiClient;
import com.fortify.ssc.restclient.ApiException;
import com.fortify.ssc.restclient.ApiResponse;
import com.fortify.ssc.restclient.Configuration;
import com.fortify.ssc.restclient.Pair;
import com.fortify.ssc.restclient.ProgressRequestBody;
import com.fortify.ssc.restclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.fortify.ssc.restclient.model.ApiCollectionActionlong;
import com.fortify.ssc.restclient.model.ApiResult;
import com.fortify.ssc.restclient.model.ApiResultApiActionResponse;
import com.fortify.ssc.restclient.model.ApiResultIssueActionResponse;
import com.fortify.ssc.restclient.model.ApiResultIssueFileBugResponse;
import com.fortify.ssc.restclient.model.ApiResultListProjectVersionIssue;
import com.fortify.ssc.restclient.model.ApiResultProjectVersionIssue;
import com.fortify.ssc.restclient.model.IssueAssignUserRequest;
import com.fortify.ssc.restclient.model.IssueAuditRequest;
import com.fortify.ssc.restclient.model.IssueFileBugRequest;
import com.fortify.ssc.restclient.model.IssueSuppressRequest;
import com.fortify.ssc.restclient.model.IssueUpdateTagRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IssueOfProjectVersionControllerApi {
    private ApiClient apiClient;

    public IssueOfProjectVersionControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IssueOfProjectVersionControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for assignUserForIssueOfProjectVersion
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignUserForIssueOfProjectVersionCall(Long parentId, IssueAssignUserRequest resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resource;

        // create path and map variables
        String localVarPath = "/projectVersions/{parentId}/issues/action/assignUser"
            .replaceAll("\\{" + "parentId" + "\\}", apiClient.escapeString(parentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "FortifyToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignUserForIssueOfProjectVersionValidateBeforeCall(Long parentId, IssueAssignUserRequest resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling assignUserForIssueOfProjectVersion(Async)");
        }
        
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling assignUserForIssueOfProjectVersion(Async)");
        }
        

        com.squareup.okhttp.Call call = assignUserForIssueOfProjectVersionCall(parentId, resource, progressListener, progressRequestListener);
        return call;

    }

    /**
     * assignUserFor
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @return ApiResultIssueActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResultIssueActionResponse assignUserForIssueOfProjectVersion(Long parentId, IssueAssignUserRequest resource) throws ApiException {
        ApiResponse<ApiResultIssueActionResponse> resp = assignUserForIssueOfProjectVersionWithHttpInfo(parentId, resource);
        return resp.getData();
    }

    /**
     * assignUserFor
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @return ApiResponse&lt;ApiResultIssueActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResultIssueActionResponse> assignUserForIssueOfProjectVersionWithHttpInfo(Long parentId, IssueAssignUserRequest resource) throws ApiException {
        com.squareup.okhttp.Call call = assignUserForIssueOfProjectVersionValidateBeforeCall(parentId, resource, null, null);
        Type localVarReturnType = new TypeToken<ApiResultIssueActionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * assignUserFor (asynchronously)
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignUserForIssueOfProjectVersionAsync(Long parentId, IssueAssignUserRequest resource, final ApiCallback<ApiResultIssueActionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignUserForIssueOfProjectVersionValidateBeforeCall(parentId, resource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResultIssueActionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for auditIssueOfProjectVersion
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call auditIssueOfProjectVersionCall(Long parentId, IssueAuditRequest resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resource;

        // create path and map variables
        String localVarPath = "/projectVersions/{parentId}/issues/action/audit"
            .replaceAll("\\{" + "parentId" + "\\}", apiClient.escapeString(parentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "FortifyToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call auditIssueOfProjectVersionValidateBeforeCall(Long parentId, IssueAuditRequest resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling auditIssueOfProjectVersion(Async)");
        }
        
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling auditIssueOfProjectVersion(Async)");
        }
        

        com.squareup.okhttp.Call call = auditIssueOfProjectVersionCall(parentId, resource, progressListener, progressRequestListener);
        return call;

    }

    /**
     * audit
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @return ApiResultIssueActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResultIssueActionResponse auditIssueOfProjectVersion(Long parentId, IssueAuditRequest resource) throws ApiException {
        ApiResponse<ApiResultIssueActionResponse> resp = auditIssueOfProjectVersionWithHttpInfo(parentId, resource);
        return resp.getData();
    }

    /**
     * audit
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @return ApiResponse&lt;ApiResultIssueActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResultIssueActionResponse> auditIssueOfProjectVersionWithHttpInfo(Long parentId, IssueAuditRequest resource) throws ApiException {
        com.squareup.okhttp.Call call = auditIssueOfProjectVersionValidateBeforeCall(parentId, resource, null, null);
        Type localVarReturnType = new TypeToken<ApiResultIssueActionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * audit (asynchronously)
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call auditIssueOfProjectVersionAsync(Long parentId, IssueAuditRequest resource, final ApiCallback<ApiResultIssueActionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = auditIssueOfProjectVersionValidateBeforeCall(parentId, resource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResultIssueActionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for doActionIssueOfProjectVersion
     * @param parentId parentId (required)
     * @param collectionAction collectionAction (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call doActionIssueOfProjectVersionCall(Long parentId, ApiCollectionActionlong collectionAction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = collectionAction;

        // create path and map variables
        String localVarPath = "/projectVersions/{parentId}/issues/action"
            .replaceAll("\\{" + "parentId" + "\\}", apiClient.escapeString(parentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "FortifyToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call doActionIssueOfProjectVersionValidateBeforeCall(Long parentId, ApiCollectionActionlong collectionAction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling doActionIssueOfProjectVersion(Async)");
        }
        
        // verify the required parameter 'collectionAction' is set
        if (collectionAction == null) {
            throw new ApiException("Missing the required parameter 'collectionAction' when calling doActionIssueOfProjectVersion(Async)");
        }
        

        com.squareup.okhttp.Call call = doActionIssueOfProjectVersionCall(parentId, collectionAction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * doAction
     * 
     * @param parentId parentId (required)
     * @param collectionAction collectionAction (required)
     * @return ApiResultApiActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResultApiActionResponse doActionIssueOfProjectVersion(Long parentId, ApiCollectionActionlong collectionAction) throws ApiException {
        ApiResponse<ApiResultApiActionResponse> resp = doActionIssueOfProjectVersionWithHttpInfo(parentId, collectionAction);
        return resp.getData();
    }

    /**
     * doAction
     * 
     * @param parentId parentId (required)
     * @param collectionAction collectionAction (required)
     * @return ApiResponse&lt;ApiResultApiActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResultApiActionResponse> doActionIssueOfProjectVersionWithHttpInfo(Long parentId, ApiCollectionActionlong collectionAction) throws ApiException {
        com.squareup.okhttp.Call call = doActionIssueOfProjectVersionValidateBeforeCall(parentId, collectionAction, null, null);
        Type localVarReturnType = new TypeToken<ApiResultApiActionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * doAction (asynchronously)
     * 
     * @param parentId parentId (required)
     * @param collectionAction collectionAction (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call doActionIssueOfProjectVersionAsync(Long parentId, ApiCollectionActionlong collectionAction, final ApiCallback<ApiResultApiActionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = doActionIssueOfProjectVersionValidateBeforeCall(parentId, collectionAction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResultApiActionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fileBugForIssueOfProjectVersion
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fileBugForIssueOfProjectVersionCall(Long parentId, IssueFileBugRequest resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resource;

        // create path and map variables
        String localVarPath = "/projectVersions/{parentId}/issues/action/fileBug"
            .replaceAll("\\{" + "parentId" + "\\}", apiClient.escapeString(parentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "FortifyToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fileBugForIssueOfProjectVersionValidateBeforeCall(Long parentId, IssueFileBugRequest resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling fileBugForIssueOfProjectVersion(Async)");
        }
        
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling fileBugForIssueOfProjectVersion(Async)");
        }
        

        com.squareup.okhttp.Call call = fileBugForIssueOfProjectVersionCall(parentId, resource, progressListener, progressRequestListener);
        return call;

    }

    /**
     * fileBugFor
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @return ApiResultIssueFileBugResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResultIssueFileBugResponse fileBugForIssueOfProjectVersion(Long parentId, IssueFileBugRequest resource) throws ApiException {
        ApiResponse<ApiResultIssueFileBugResponse> resp = fileBugForIssueOfProjectVersionWithHttpInfo(parentId, resource);
        return resp.getData();
    }

    /**
     * fileBugFor
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @return ApiResponse&lt;ApiResultIssueFileBugResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResultIssueFileBugResponse> fileBugForIssueOfProjectVersionWithHttpInfo(Long parentId, IssueFileBugRequest resource) throws ApiException {
        com.squareup.okhttp.Call call = fileBugForIssueOfProjectVersionValidateBeforeCall(parentId, resource, null, null);
        Type localVarReturnType = new TypeToken<ApiResultIssueFileBugResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * fileBugFor (asynchronously)
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fileBugForIssueOfProjectVersionAsync(Long parentId, IssueFileBugRequest resource, final ApiCallback<ApiResultIssueFileBugResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fileBugForIssueOfProjectVersionValidateBeforeCall(parentId, resource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResultIssueFileBugResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listIssueOfProjectVersion
     * @param parentId parentId (required)
     * @param start A start offset in object listing (optional, default to 0)
     * @param limit A maximum number of returned objects in listing, if &#39;-1&#39; or &#39;0&#39; no limit is applied (optional, default to 200)
     * @param q An issue query expression, must be used together with the &#39;qm&#39; parameter (optional)
     * @param qm Syntax mode for the &#39;q&#39; parameter, mandatory if the &#39;q&#39; parameter is used (optional)
     * @param orderby Fields to order by (optional)
     * @param filterset Filter set to use (optional)
     * @param fields Output fields (optional)
     * @param showhidden If &#39;true&#39;, include hidden issues in search results. If &#39;false&#39;, exclude hidden issues from search results. If no options are set, use application version profile settings to get value of this option. (optional, default to false)
     * @param showremoved If &#39;true&#39;, include removed issues in search results. If &#39;false&#39;, exclude removed issues from search results. If no options are set, use application version profile settings to get value of this option. (optional, default to false)
     * @param showsuppressed If &#39;true&#39;, include suppressed issues in search results. If &#39;false&#39;, exclude suppressed issues from search results. If no options are set, use application version profile settings to get value of this option. (optional, default to false)
     * @param showshortfilenames If &#39;true&#39;, only short file names will be displayed in issues list. (optional, default to false)
     * @param filter filter (optional)
     * @param groupid groupid (optional)
     * @param groupingtype groupingtype (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listIssueOfProjectVersionCall(Long parentId, Integer start, Integer limit, String q, String qm, String orderby, String filterset, String fields, Boolean showhidden, Boolean showremoved, Boolean showsuppressed, Boolean showshortfilenames, String filter, String groupid, String groupingtype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projectVersions/{parentId}/issues"
            .replaceAll("\\{" + "parentId" + "\\}", apiClient.escapeString(parentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("q", q));
        if (qm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("qm", qm));
        if (orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderby", orderby));
        if (filterset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filterset", filterset));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (showhidden != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("showhidden", showhidden));
        if (showremoved != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("showremoved", showremoved));
        if (showsuppressed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("showsuppressed", showsuppressed));
        if (showshortfilenames != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("showshortfilenames", showshortfilenames));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (groupid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupid", groupid));
        if (groupingtype != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupingtype", groupingtype));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "FortifyToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listIssueOfProjectVersionValidateBeforeCall(Long parentId, Integer start, Integer limit, String q, String qm, String orderby, String filterset, String fields, Boolean showhidden, Boolean showremoved, Boolean showsuppressed, Boolean showshortfilenames, String filter, String groupid, String groupingtype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling listIssueOfProjectVersion(Async)");
        }
        

        com.squareup.okhttp.Call call = listIssueOfProjectVersionCall(parentId, start, limit, q, qm, orderby, filterset, fields, showhidden, showremoved, showsuppressed, showshortfilenames, filter, groupid, groupingtype, progressListener, progressRequestListener);
        return call;

    }

    /**
     * list
     * 
     * @param parentId parentId (required)
     * @param start A start offset in object listing (optional, default to 0)
     * @param limit A maximum number of returned objects in listing, if &#39;-1&#39; or &#39;0&#39; no limit is applied (optional, default to 200)
     * @param q An issue query expression, must be used together with the &#39;qm&#39; parameter (optional)
     * @param qm Syntax mode for the &#39;q&#39; parameter, mandatory if the &#39;q&#39; parameter is used (optional)
     * @param orderby Fields to order by (optional)
     * @param filterset Filter set to use (optional)
     * @param fields Output fields (optional)
     * @param showhidden If &#39;true&#39;, include hidden issues in search results. If &#39;false&#39;, exclude hidden issues from search results. If no options are set, use application version profile settings to get value of this option. (optional, default to false)
     * @param showremoved If &#39;true&#39;, include removed issues in search results. If &#39;false&#39;, exclude removed issues from search results. If no options are set, use application version profile settings to get value of this option. (optional, default to false)
     * @param showsuppressed If &#39;true&#39;, include suppressed issues in search results. If &#39;false&#39;, exclude suppressed issues from search results. If no options are set, use application version profile settings to get value of this option. (optional, default to false)
     * @param showshortfilenames If &#39;true&#39;, only short file names will be displayed in issues list. (optional, default to false)
     * @param filter filter (optional)
     * @param groupid groupid (optional)
     * @param groupingtype groupingtype (optional)
     * @return ApiResultListProjectVersionIssue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResultListProjectVersionIssue listIssueOfProjectVersion(Long parentId, Integer start, Integer limit, String q, String qm, String orderby, String filterset, String fields, Boolean showhidden, Boolean showremoved, Boolean showsuppressed, Boolean showshortfilenames, String filter, String groupid, String groupingtype) throws ApiException {
        ApiResponse<ApiResultListProjectVersionIssue> resp = listIssueOfProjectVersionWithHttpInfo(parentId, start, limit, q, qm, orderby, filterset, fields, showhidden, showremoved, showsuppressed, showshortfilenames, filter, groupid, groupingtype);
        return resp.getData();
    }

    /**
     * list
     * 
     * @param parentId parentId (required)
     * @param start A start offset in object listing (optional, default to 0)
     * @param limit A maximum number of returned objects in listing, if &#39;-1&#39; or &#39;0&#39; no limit is applied (optional, default to 200)
     * @param q An issue query expression, must be used together with the &#39;qm&#39; parameter (optional)
     * @param qm Syntax mode for the &#39;q&#39; parameter, mandatory if the &#39;q&#39; parameter is used (optional)
     * @param orderby Fields to order by (optional)
     * @param filterset Filter set to use (optional)
     * @param fields Output fields (optional)
     * @param showhidden If &#39;true&#39;, include hidden issues in search results. If &#39;false&#39;, exclude hidden issues from search results. If no options are set, use application version profile settings to get value of this option. (optional, default to false)
     * @param showremoved If &#39;true&#39;, include removed issues in search results. If &#39;false&#39;, exclude removed issues from search results. If no options are set, use application version profile settings to get value of this option. (optional, default to false)
     * @param showsuppressed If &#39;true&#39;, include suppressed issues in search results. If &#39;false&#39;, exclude suppressed issues from search results. If no options are set, use application version profile settings to get value of this option. (optional, default to false)
     * @param showshortfilenames If &#39;true&#39;, only short file names will be displayed in issues list. (optional, default to false)
     * @param filter filter (optional)
     * @param groupid groupid (optional)
     * @param groupingtype groupingtype (optional)
     * @return ApiResponse&lt;ApiResultListProjectVersionIssue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResultListProjectVersionIssue> listIssueOfProjectVersionWithHttpInfo(Long parentId, Integer start, Integer limit, String q, String qm, String orderby, String filterset, String fields, Boolean showhidden, Boolean showremoved, Boolean showsuppressed, Boolean showshortfilenames, String filter, String groupid, String groupingtype) throws ApiException {
        com.squareup.okhttp.Call call = listIssueOfProjectVersionValidateBeforeCall(parentId, start, limit, q, qm, orderby, filterset, fields, showhidden, showremoved, showsuppressed, showshortfilenames, filter, groupid, groupingtype, null, null);
        Type localVarReturnType = new TypeToken<ApiResultListProjectVersionIssue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * list (asynchronously)
     * 
     * @param parentId parentId (required)
     * @param start A start offset in object listing (optional, default to 0)
     * @param limit A maximum number of returned objects in listing, if &#39;-1&#39; or &#39;0&#39; no limit is applied (optional, default to 200)
     * @param q An issue query expression, must be used together with the &#39;qm&#39; parameter (optional)
     * @param qm Syntax mode for the &#39;q&#39; parameter, mandatory if the &#39;q&#39; parameter is used (optional)
     * @param orderby Fields to order by (optional)
     * @param filterset Filter set to use (optional)
     * @param fields Output fields (optional)
     * @param showhidden If &#39;true&#39;, include hidden issues in search results. If &#39;false&#39;, exclude hidden issues from search results. If no options are set, use application version profile settings to get value of this option. (optional, default to false)
     * @param showremoved If &#39;true&#39;, include removed issues in search results. If &#39;false&#39;, exclude removed issues from search results. If no options are set, use application version profile settings to get value of this option. (optional, default to false)
     * @param showsuppressed If &#39;true&#39;, include suppressed issues in search results. If &#39;false&#39;, exclude suppressed issues from search results. If no options are set, use application version profile settings to get value of this option. (optional, default to false)
     * @param showshortfilenames If &#39;true&#39;, only short file names will be displayed in issues list. (optional, default to false)
     * @param filter filter (optional)
     * @param groupid groupid (optional)
     * @param groupingtype groupingtype (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listIssueOfProjectVersionAsync(Long parentId, Integer start, Integer limit, String q, String qm, String orderby, String filterset, String fields, Boolean showhidden, Boolean showremoved, Boolean showsuppressed, Boolean showshortfilenames, String filter, String groupid, String groupingtype, final ApiCallback<ApiResultListProjectVersionIssue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listIssueOfProjectVersionValidateBeforeCall(parentId, start, limit, q, qm, orderby, filterset, fields, showhidden, showremoved, showsuppressed, showshortfilenames, filter, groupid, groupingtype, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResultListProjectVersionIssue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for readIssueOfProjectVersion
     * @param parentId parentId (required)
     * @param id id (required)
     * @param fields Output fields (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call readIssueOfProjectVersionCall(Long parentId, Long id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projectVersions/{parentId}/issues/{id}"
            .replaceAll("\\{" + "parentId" + "\\}", apiClient.escapeString(parentId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "FortifyToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call readIssueOfProjectVersionValidateBeforeCall(Long parentId, Long id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling readIssueOfProjectVersion(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling readIssueOfProjectVersion(Async)");
        }
        

        com.squareup.okhttp.Call call = readIssueOfProjectVersionCall(parentId, id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * read
     * 
     * @param parentId parentId (required)
     * @param id id (required)
     * @param fields Output fields (optional)
     * @return ApiResultProjectVersionIssue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResultProjectVersionIssue readIssueOfProjectVersion(Long parentId, Long id, String fields) throws ApiException {
        ApiResponse<ApiResultProjectVersionIssue> resp = readIssueOfProjectVersionWithHttpInfo(parentId, id, fields);
        return resp.getData();
    }

    /**
     * read
     * 
     * @param parentId parentId (required)
     * @param id id (required)
     * @param fields Output fields (optional)
     * @return ApiResponse&lt;ApiResultProjectVersionIssue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResultProjectVersionIssue> readIssueOfProjectVersionWithHttpInfo(Long parentId, Long id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = readIssueOfProjectVersionValidateBeforeCall(parentId, id, fields, null, null);
        Type localVarReturnType = new TypeToken<ApiResultProjectVersionIssue>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * read (asynchronously)
     * 
     * @param parentId parentId (required)
     * @param id id (required)
     * @param fields Output fields (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call readIssueOfProjectVersionAsync(Long parentId, Long id, String fields, final ApiCallback<ApiResultProjectVersionIssue> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = readIssueOfProjectVersionValidateBeforeCall(parentId, id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResultProjectVersionIssue>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for suppressIssueOfProjectVersion
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call suppressIssueOfProjectVersionCall(Long parentId, IssueSuppressRequest resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resource;

        // create path and map variables
        String localVarPath = "/projectVersions/{parentId}/issues/action/suppress"
            .replaceAll("\\{" + "parentId" + "\\}", apiClient.escapeString(parentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "FortifyToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call suppressIssueOfProjectVersionValidateBeforeCall(Long parentId, IssueSuppressRequest resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling suppressIssueOfProjectVersion(Async)");
        }
        
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling suppressIssueOfProjectVersion(Async)");
        }
        

        com.squareup.okhttp.Call call = suppressIssueOfProjectVersionCall(parentId, resource, progressListener, progressRequestListener);
        return call;

    }

    /**
     * suppress
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @return ApiResultIssueActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResultIssueActionResponse suppressIssueOfProjectVersion(Long parentId, IssueSuppressRequest resource) throws ApiException {
        ApiResponse<ApiResultIssueActionResponse> resp = suppressIssueOfProjectVersionWithHttpInfo(parentId, resource);
        return resp.getData();
    }

    /**
     * suppress
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @return ApiResponse&lt;ApiResultIssueActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResultIssueActionResponse> suppressIssueOfProjectVersionWithHttpInfo(Long parentId, IssueSuppressRequest resource) throws ApiException {
        com.squareup.okhttp.Call call = suppressIssueOfProjectVersionValidateBeforeCall(parentId, resource, null, null);
        Type localVarReturnType = new TypeToken<ApiResultIssueActionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * suppress (asynchronously)
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call suppressIssueOfProjectVersionAsync(Long parentId, IssueSuppressRequest resource, final ApiCallback<ApiResultIssueActionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = suppressIssueOfProjectVersionValidateBeforeCall(parentId, resource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResultIssueActionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTagForIssueOfProjectVersion
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTagForIssueOfProjectVersionCall(Long parentId, IssueUpdateTagRequest resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resource;

        // create path and map variables
        String localVarPath = "/projectVersions/{parentId}/issues/action/updateTag"
            .replaceAll("\\{" + "parentId" + "\\}", apiClient.escapeString(parentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "FortifyToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTagForIssueOfProjectVersionValidateBeforeCall(Long parentId, IssueUpdateTagRequest resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling updateTagForIssueOfProjectVersion(Async)");
        }
        
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling updateTagForIssueOfProjectVersion(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTagForIssueOfProjectVersionCall(parentId, resource, progressListener, progressRequestListener);
        return call;

    }

    /**
     * updateTagFor
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @return ApiResultIssueActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResultIssueActionResponse updateTagForIssueOfProjectVersion(Long parentId, IssueUpdateTagRequest resource) throws ApiException {
        ApiResponse<ApiResultIssueActionResponse> resp = updateTagForIssueOfProjectVersionWithHttpInfo(parentId, resource);
        return resp.getData();
    }

    /**
     * updateTagFor
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @return ApiResponse&lt;ApiResultIssueActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResultIssueActionResponse> updateTagForIssueOfProjectVersionWithHttpInfo(Long parentId, IssueUpdateTagRequest resource) throws ApiException {
        com.squareup.okhttp.Call call = updateTagForIssueOfProjectVersionValidateBeforeCall(parentId, resource, null, null);
        Type localVarReturnType = new TypeToken<ApiResultIssueActionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * updateTagFor (asynchronously)
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTagForIssueOfProjectVersionAsync(Long parentId, IssueUpdateTagRequest resource, final ApiCallback<ApiResultIssueActionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTagForIssueOfProjectVersionValidateBeforeCall(parentId, resource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResultIssueActionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
