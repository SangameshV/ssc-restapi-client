/*
 * Fortify Software Security Center API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1:18.20
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.fortify.ssc.restclient.api;

import com.fortify.ssc.restclient.ApiCallback;
import com.fortify.ssc.restclient.ApiClient;
import com.fortify.ssc.restclient.ApiException;
import com.fortify.ssc.restclient.ApiResponse;
import com.fortify.ssc.restclient.Configuration;
import com.fortify.ssc.restclient.Pair;
import com.fortify.ssc.restclient.ProgressRequestBody;
import com.fortify.ssc.restclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.fortify.ssc.restclient.model.ApiCollectionActionstring;
import com.fortify.ssc.restclient.model.ApiResult;
import com.fortify.ssc.restclient.model.ApiResultApiActionResponse;
import com.fortify.ssc.restclient.model.ApiResultCloudPoolWorkerActionResponse;
import com.fortify.ssc.restclient.model.ApiResultListCloudWorker;
import com.fortify.ssc.restclient.model.CloudPoolWorkerAssignRequest;
import com.fortify.ssc.restclient.model.CloudPoolWorkerDisableRequest;
import com.fortify.ssc.restclient.model.CloudPoolWorkerReplaceRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CloudWorkerOfCloudPoolControllerApi {
    private ApiClient apiClient;

    public CloudWorkerOfCloudPoolControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CloudWorkerOfCloudPoolControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for assignCloudWorkerOfCloudPool
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignCloudWorkerOfCloudPoolCall(String parentId, CloudPoolWorkerAssignRequest resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resource;

        // create path and map variables
        String localVarPath = "/cloudpools/{parentId}/workers/action/assign"
            .replaceAll("\\{" + "parentId" + "\\}", apiClient.escapeString(parentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "FortifyToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignCloudWorkerOfCloudPoolValidateBeforeCall(String parentId, CloudPoolWorkerAssignRequest resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling assignCloudWorkerOfCloudPool(Async)");
        }
        
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling assignCloudWorkerOfCloudPool(Async)");
        }
        

        com.squareup.okhttp.Call call = assignCloudWorkerOfCloudPoolCall(parentId, resource, progressListener, progressRequestListener);
        return call;

    }

    /**
     * assign
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @return ApiResultCloudPoolWorkerActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResultCloudPoolWorkerActionResponse assignCloudWorkerOfCloudPool(String parentId, CloudPoolWorkerAssignRequest resource) throws ApiException {
        ApiResponse<ApiResultCloudPoolWorkerActionResponse> resp = assignCloudWorkerOfCloudPoolWithHttpInfo(parentId, resource);
        return resp.getData();
    }

    /**
     * assign
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @return ApiResponse&lt;ApiResultCloudPoolWorkerActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResultCloudPoolWorkerActionResponse> assignCloudWorkerOfCloudPoolWithHttpInfo(String parentId, CloudPoolWorkerAssignRequest resource) throws ApiException {
        com.squareup.okhttp.Call call = assignCloudWorkerOfCloudPoolValidateBeforeCall(parentId, resource, null, null);
        Type localVarReturnType = new TypeToken<ApiResultCloudPoolWorkerActionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * assign (asynchronously)
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignCloudWorkerOfCloudPoolAsync(String parentId, CloudPoolWorkerAssignRequest resource, final ApiCallback<ApiResultCloudPoolWorkerActionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignCloudWorkerOfCloudPoolValidateBeforeCall(parentId, resource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResultCloudPoolWorkerActionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for disableCloudWorkerOfCloudPool
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call disableCloudWorkerOfCloudPoolCall(String parentId, CloudPoolWorkerDisableRequest resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resource;

        // create path and map variables
        String localVarPath = "/cloudpools/{parentId}/workers/action/disable"
            .replaceAll("\\{" + "parentId" + "\\}", apiClient.escapeString(parentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "FortifyToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disableCloudWorkerOfCloudPoolValidateBeforeCall(String parentId, CloudPoolWorkerDisableRequest resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling disableCloudWorkerOfCloudPool(Async)");
        }
        
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling disableCloudWorkerOfCloudPool(Async)");
        }
        

        com.squareup.okhttp.Call call = disableCloudWorkerOfCloudPoolCall(parentId, resource, progressListener, progressRequestListener);
        return call;

    }

    /**
     * disable
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @return ApiResultCloudPoolWorkerActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResultCloudPoolWorkerActionResponse disableCloudWorkerOfCloudPool(String parentId, CloudPoolWorkerDisableRequest resource) throws ApiException {
        ApiResponse<ApiResultCloudPoolWorkerActionResponse> resp = disableCloudWorkerOfCloudPoolWithHttpInfo(parentId, resource);
        return resp.getData();
    }

    /**
     * disable
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @return ApiResponse&lt;ApiResultCloudPoolWorkerActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResultCloudPoolWorkerActionResponse> disableCloudWorkerOfCloudPoolWithHttpInfo(String parentId, CloudPoolWorkerDisableRequest resource) throws ApiException {
        com.squareup.okhttp.Call call = disableCloudWorkerOfCloudPoolValidateBeforeCall(parentId, resource, null, null);
        Type localVarReturnType = new TypeToken<ApiResultCloudPoolWorkerActionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * disable (asynchronously)
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disableCloudWorkerOfCloudPoolAsync(String parentId, CloudPoolWorkerDisableRequest resource, final ApiCallback<ApiResultCloudPoolWorkerActionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disableCloudWorkerOfCloudPoolValidateBeforeCall(parentId, resource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResultCloudPoolWorkerActionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for doActionCloudWorkerOfCloudPool
     * @param parentId parentId (required)
     * @param collectionAction collectionAction (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call doActionCloudWorkerOfCloudPoolCall(String parentId, ApiCollectionActionstring collectionAction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = collectionAction;

        // create path and map variables
        String localVarPath = "/cloudpools/{parentId}/workers/action"
            .replaceAll("\\{" + "parentId" + "\\}", apiClient.escapeString(parentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "FortifyToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call doActionCloudWorkerOfCloudPoolValidateBeforeCall(String parentId, ApiCollectionActionstring collectionAction, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling doActionCloudWorkerOfCloudPool(Async)");
        }
        
        // verify the required parameter 'collectionAction' is set
        if (collectionAction == null) {
            throw new ApiException("Missing the required parameter 'collectionAction' when calling doActionCloudWorkerOfCloudPool(Async)");
        }
        

        com.squareup.okhttp.Call call = doActionCloudWorkerOfCloudPoolCall(parentId, collectionAction, progressListener, progressRequestListener);
        return call;

    }

    /**
     * doAction
     * 
     * @param parentId parentId (required)
     * @param collectionAction collectionAction (required)
     * @return ApiResultApiActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResultApiActionResponse doActionCloudWorkerOfCloudPool(String parentId, ApiCollectionActionstring collectionAction) throws ApiException {
        ApiResponse<ApiResultApiActionResponse> resp = doActionCloudWorkerOfCloudPoolWithHttpInfo(parentId, collectionAction);
        return resp.getData();
    }

    /**
     * doAction
     * 
     * @param parentId parentId (required)
     * @param collectionAction collectionAction (required)
     * @return ApiResponse&lt;ApiResultApiActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResultApiActionResponse> doActionCloudWorkerOfCloudPoolWithHttpInfo(String parentId, ApiCollectionActionstring collectionAction) throws ApiException {
        com.squareup.okhttp.Call call = doActionCloudWorkerOfCloudPoolValidateBeforeCall(parentId, collectionAction, null, null);
        Type localVarReturnType = new TypeToken<ApiResultApiActionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * doAction (asynchronously)
     * 
     * @param parentId parentId (required)
     * @param collectionAction collectionAction (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call doActionCloudWorkerOfCloudPoolAsync(String parentId, ApiCollectionActionstring collectionAction, final ApiCallback<ApiResultApiActionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = doActionCloudWorkerOfCloudPoolValidateBeforeCall(parentId, collectionAction, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResultApiActionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCloudWorkerOfCloudPool
     * @param parentId parentId (required)
     * @param fields Output fields (optional)
     * @param start A start offset in object listing (optional, default to 0)
     * @param limit A maximum number of returned objects in listing, if &#39;-1&#39; or &#39;0&#39; no limit is applied (optional, default to 200)
     * @param orderby Fields to order by (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCloudWorkerOfCloudPoolCall(String parentId, String fields, Integer start, Integer limit, String orderby, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cloudpools/{parentId}/workers"
            .replaceAll("\\{" + "parentId" + "\\}", apiClient.escapeString(parentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("start", start));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderby", orderby));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "FortifyToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCloudWorkerOfCloudPoolValidateBeforeCall(String parentId, String fields, Integer start, Integer limit, String orderby, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling listCloudWorkerOfCloudPool(Async)");
        }
        

        com.squareup.okhttp.Call call = listCloudWorkerOfCloudPoolCall(parentId, fields, start, limit, orderby, progressListener, progressRequestListener);
        return call;

    }

    /**
     * list
     * 
     * @param parentId parentId (required)
     * @param fields Output fields (optional)
     * @param start A start offset in object listing (optional, default to 0)
     * @param limit A maximum number of returned objects in listing, if &#39;-1&#39; or &#39;0&#39; no limit is applied (optional, default to 200)
     * @param orderby Fields to order by (optional)
     * @return ApiResultListCloudWorker
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResultListCloudWorker listCloudWorkerOfCloudPool(String parentId, String fields, Integer start, Integer limit, String orderby) throws ApiException {
        ApiResponse<ApiResultListCloudWorker> resp = listCloudWorkerOfCloudPoolWithHttpInfo(parentId, fields, start, limit, orderby);
        return resp.getData();
    }

    /**
     * list
     * 
     * @param parentId parentId (required)
     * @param fields Output fields (optional)
     * @param start A start offset in object listing (optional, default to 0)
     * @param limit A maximum number of returned objects in listing, if &#39;-1&#39; or &#39;0&#39; no limit is applied (optional, default to 200)
     * @param orderby Fields to order by (optional)
     * @return ApiResponse&lt;ApiResultListCloudWorker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResultListCloudWorker> listCloudWorkerOfCloudPoolWithHttpInfo(String parentId, String fields, Integer start, Integer limit, String orderby) throws ApiException {
        com.squareup.okhttp.Call call = listCloudWorkerOfCloudPoolValidateBeforeCall(parentId, fields, start, limit, orderby, null, null);
        Type localVarReturnType = new TypeToken<ApiResultListCloudWorker>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * list (asynchronously)
     * 
     * @param parentId parentId (required)
     * @param fields Output fields (optional)
     * @param start A start offset in object listing (optional, default to 0)
     * @param limit A maximum number of returned objects in listing, if &#39;-1&#39; or &#39;0&#39; no limit is applied (optional, default to 200)
     * @param orderby Fields to order by (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCloudWorkerOfCloudPoolAsync(String parentId, String fields, Integer start, Integer limit, String orderby, final ApiCallback<ApiResultListCloudWorker> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCloudWorkerOfCloudPoolValidateBeforeCall(parentId, fields, start, limit, orderby, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResultListCloudWorker>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for replaceCloudWorkerOfCloudPool
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceCloudWorkerOfCloudPoolCall(String parentId, CloudPoolWorkerReplaceRequest resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = resource;

        // create path and map variables
        String localVarPath = "/cloudpools/{parentId}/workers/action/replace"
            .replaceAll("\\{" + "parentId" + "\\}", apiClient.escapeString(parentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "FortifyToken" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call replaceCloudWorkerOfCloudPoolValidateBeforeCall(String parentId, CloudPoolWorkerReplaceRequest resource, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parentId' is set
        if (parentId == null) {
            throw new ApiException("Missing the required parameter 'parentId' when calling replaceCloudWorkerOfCloudPool(Async)");
        }
        
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling replaceCloudWorkerOfCloudPool(Async)");
        }
        

        com.squareup.okhttp.Call call = replaceCloudWorkerOfCloudPoolCall(parentId, resource, progressListener, progressRequestListener);
        return call;

    }

    /**
     * replace
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @return ApiResultCloudPoolWorkerActionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResultCloudPoolWorkerActionResponse replaceCloudWorkerOfCloudPool(String parentId, CloudPoolWorkerReplaceRequest resource) throws ApiException {
        ApiResponse<ApiResultCloudPoolWorkerActionResponse> resp = replaceCloudWorkerOfCloudPoolWithHttpInfo(parentId, resource);
        return resp.getData();
    }

    /**
     * replace
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @return ApiResponse&lt;ApiResultCloudPoolWorkerActionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiResultCloudPoolWorkerActionResponse> replaceCloudWorkerOfCloudPoolWithHttpInfo(String parentId, CloudPoolWorkerReplaceRequest resource) throws ApiException {
        com.squareup.okhttp.Call call = replaceCloudWorkerOfCloudPoolValidateBeforeCall(parentId, resource, null, null);
        Type localVarReturnType = new TypeToken<ApiResultCloudPoolWorkerActionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * replace (asynchronously)
     * 
     * @param parentId parentId (required)
     * @param resource resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceCloudWorkerOfCloudPoolAsync(String parentId, CloudPoolWorkerReplaceRequest resource, final ApiCallback<ApiResultCloudPoolWorkerActionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceCloudWorkerOfCloudPoolValidateBeforeCall(parentId, resource, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ApiResultCloudPoolWorkerActionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
